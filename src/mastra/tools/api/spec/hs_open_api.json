{
  "openapi": "3.0.1",
  "info": {
    "title": "Highspot REST API",
    "description": "Highspot REST API Documentation \n\n__Note:__ HTTPS is required for all API calls to Highspot endpoints\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.highspot.com/v1.0"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "paths": {
    "/assessments/external-survey": {
      "post": {
        "tags": [
          "Assessments"
        ],
        "summary": "Create an external survey assessment",
        "description": "Creates an external survey assessment for a user",
        "requestBody": {
          "description": "The external survey assessment details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "External survey assessment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalSurveyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-bad-request-error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get current user",
        "description": "Returns the user id of the caller",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "responses": {
          "200": {
            "description": "The user id of the caller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List users",
        "description": "Lists users",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email name to filter users by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "query",
            "description": "Will return all verified users by default if not specified\nOther options include, * unverified - return all unverified users * all - return all live users (including both verified and unverified)\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with-fields",
            "in": "query",
            "description": "Additional fields to include in the response specified as a comma separated list.\n\nBecause they take additional time to produce, the following fields must be explicitly\nrequested for them to be returned with the user\n* properties\n\nSpecify * to return all of the additional fields available\n\n(Replaces deprecated \"fields\" input parameter).\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude-fields",
            "in": "query",
            "description": "Additional fields to exclude in the response specified as a comma separated list\n\nBecause they take additional time to produce, the following fields can be added\nfor them to not be returned with the user\n* groups\n* favorites\n\nSpecify * to exclude all of the additional fields available\n\n(Replaces deprecated \"fields\" input parameter).\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request, starting from 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of users returned. If not specified it will default to 100",
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users listed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "email-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "with_fields-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "start-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "limit-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "email-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "with_fields-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "limit-value-error": {
                    "value": "Property ‘list’: Value must be one of “unverified”, “all”"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than “email”, “list”, “with_fields”, “start”, and “limit”)"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add or update users",
        "description": "Adds or updates users and their properties\n\nThe request should contain an array of entries for each user to be created or updated.  A user\ncan be identified by a user id or an email address.  If the email address of the user doesn't\nexist a user account will be created.  Additionally, properties can be specified for each user\nto be updated.\n\nThe user making the api request must have edit permission for any user that is requested to be updated.\n\nThe response will contain an array with each entry corresponding to each entry in the request.  Each\nentry will contain the status of the update and the id of the user, or a message indicating the\nreason for failure.\n\nWhen specifying many users, the operation can take a while.  In order to avoid timeouts, use\nthe async parameter to initiate the request asynchronously.  Using the resulting request id,\npoll /requests/:id to determine when the request is complete.  Once complete, retrieve the\nresult from /requests/:id/result.\n",
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Whether or not to execute asynchronously",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The users to add or update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post-users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Users added or updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post-users-response"
                },
                "examples": {
                  "success": {
                    "value": {
                      "collection": [
                        {
                          "status": "ok",
                          "id": "string",
                          "created": true
                        }
                      ]
                    }
                  },
                  "id-or-email-not-specified": {
                    "value": {
                      "collection": [
                        {
                          "status": "failed",
                          "message": "Either id or email must be specified"
                        }
                      ]
                    }
                  },
                  "not-authorized-create-new-user": {
                    "value": {
                      "collection": [
                        {
                          "status": "failed",
                          "message": "Not authorized to create a new user"
                        }
                      ]
                    }
                  },
                  "user-not-of-specified-kind": {
                    "value": {
                      "collection": [
                        {
                          "status": "failed",
                          "message": "User is not of specified kind",
                          "kind": "string"
                        }
                      ]
                    }
                  },
                  "unknown-user": {
                    "value": {
                      "collection": [
                        {
                          "status": "failed",
                          "message": "Unknown user",
                          "id": "string"
                        }
                      ]
                    }
                  },
                  "user-not-in-domain": {
                    "value": {
                      "collection": [
                        {
                          "status": "failed",
                          "message": "is not an address in \u003Cdomain_id\u003E",
                          "domain": "\u003Cuser_domain_id\u003E"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Asynchronous request initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "email-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "id-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "property-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "email-less-than-max-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "id-less-than-max-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "email-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "property-key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "property-value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "propert-value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "value-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"id\", \"email\", \"kind\", and \"properties\")"
                  },
                  "kind-error": {
                    "value": "Property “kind”: Value must be one of “employee”, “partner”"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-validation-error"
                },
                "examples": {
                  "email-invalid": {
                    "$ref": "#/components/examples/email-invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/DomainNotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/users/invite": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Send invites to users",
        "description": "Send a Highspot invite to users",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The request body takes a `role` for the users (`Employee` or `Partner`), an optional `message` to send in the email, and a list of `names` as emails.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/invite-users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "message-greater-than-max-length": {
                    "value": "Property \"message\": Value can be at most 100 characters"
                  },
                  "email-greater-than-max-length": {
                    "value": "Property \"email\": Value can be at most 256 characters"
                  },
                  "invalid-email-address": {
                    "$ref": "#/components/examples/invalid-email-address"
                  },
                  "role-error": {
                    "value": "Property \"role\": Value must be one of “Employee”, “Partner”"
                  },
                  "missing-role": {
                    "value": "Property \"role\" is required"
                  },
                  "missing-names": {
                    "value": "Property \"names\" is required"
                  },
                  "names-value-error": {
                    "value": "Property \"names\": Value must be an array"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/users/{user}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get metadata",
        "description": "Returns user metadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          }
        ],
        "responses": {
          "200": {
            "description": "User metadata returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "user-does-not-exist": {
                    "$ref": "#/components/examples/user-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "user-deleted": {
                    "$ref": "#/components/examples/user-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update metadata",
        "description": "Updates user metadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The user metadata to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch-user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User metadata updated successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "id-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "display_name-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "groups-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "sso-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "spots-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "name-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "surname-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "email-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "name-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "surname-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "email-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "name-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "surname-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "email-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "suspended-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "invalid-user": {
                    "$ref": "#/components/examples/invalid-key"
                  },
                  "invalid-suspendend-user": {
                    "$ref": "#/components/examples/invalid-key"
                  },
                  "cannot-suspend-self": {
                    "$ref": "#/components/examples/cannot-suspend"
                  },
                  "cannot-suspend-protected-service-accounts": {
                    "$ref": "#/components/examples/cannot-suspend"
                  },
                  "invalid-email-address": {
                    "$ref": "#/components/examples/invalid-email-address"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than “name”, “surname”, and “suspended”)"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "user-does-not-exist": {
                    "$ref": "#/components/examples/user-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "user-deleted": {
                    "$ref": "#/components/examples/user-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Delete a user, with the option to reassign the groups, pitches, and spots owned by this\nuser to another owner, as well as the option to leave any reviews and social activity.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          },
          {
            "name": "delete-owned-entities",
            "in": "query",
            "description": "Whether to delete the user's owned spots, pitches, and groups.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "new-owner",
            "in": "query",
            "description": "The email of the new owner to transfer spots, pitches, and groups to. (required if delete-owned-entities is false)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete-references",
            "in": "query",
            "description": "Whether to delete reviews and social media activities or preserve.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users deleted successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "new-owner-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "new-owner-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "delete-owned-entities-false-error": {
                    "value": "Must provide new-owner if delete-owned-entities is false"
                  },
                  "delete-owned-entities-true-error": {
                    "value": "Don’t provide new-owner if delete-owned-entities is true"
                  },
                  "invalid-attributes": {
                    "$ref": "#/components/examples/invalid-attributes"
                  },
                  "cannot-delete-protected-service-accounts": {
                    "value": "Cannot delete protected service accounts"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-validation-error"
                },
                "examples": {
                  "new-owner-email-invalid": {
                    "$ref": "#/components/examples/email-invalid"
                  },
                  "cannot-delete-new-owner": {
                    "value": {
                      "name": "\u003Cemail\u003E",
                      "error": "DELETED_USER",
                      "message": "is the user being deleted"
                    }
                  },
                  "new-owner-suspended-user": {
                    "value": {
                      "name": "\u003Cemail\u003E",
                      "error": "NO_ACCESS",
                      "message": "is a suspended user"
                    }
                  },
                  "new-owner-never-logged-in": {
                    "value": {
                      "name": "\u003Cemail\u003E",
                      "error": "NO_ACCESS",
                      "message": "has never logged in"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "user-does-not-exist": {
                    "$ref": "#/components/examples/user-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "user-deleted": {
                    "$ref": "#/components/examples/user-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/users/{user}/thumbnail": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Set thumbnail",
        "description": "Sets the thumbnail image for a user\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "filename"
                ],
                "properties": {
                  "filename": {
                    "type": "string",
                    "description": "The thumbnail image to set for the user",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thumbnail image set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "invalid-image-format": {
                    "value": "Invalid image format"
                  },
                  "file-not-provided": {
                    "$ref": "#/components/examples/file-not-provided"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/MissingFile"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/users/{user}/properties": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get properties",
        "description": "Returns all user properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          }
        ],
        "responses": {
          "200": {
            "description": "User properties returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user-properties"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Set properties",
        "description": "Sets all user properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The user properties to set",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User properties set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "invalid-properties": {
                    "$ref": "#/components/examples/invalid-properties"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add or update properties",
        "description": "Adds or updates user properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The user properties to set",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User properties set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "invalid-properties": {
                    "$ref": "#/components/examples/invalid-properties"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/users/{user}/properties/{property}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get property",
        "description": "Returns a user property",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          },
          {
            "$ref": "#/components/parameters/property"
          }
        ],
        "responses": {
          "200": {
            "description": "User property returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/property-value"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownKey"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Set property",
        "description": "Sets a user property",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          },
          {
            "$ref": "#/components/parameters/property"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The property value to set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/property-value"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User property set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "invalid-properties": {
                    "$ref": "#/components/examples/invalid-properties"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"value\")"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete property",
        "description": "Deletes a user property",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/user"
          },
          {
            "$ref": "#/components/parameters/property"
          }
        ],
        "responses": {
          "200": {
            "description": "User property deleted successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "invalid-key": {
                    "$ref": "#/components/examples/invalid-key"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/user-account-events": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "API to bulk deactivate / reactivate users",
        "description": "This API is used to single/bulk deactivate/reactivate users",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The request body takes an array of emails of users, an `event` (deactivate or reactivate), notification (true or false) to send users and an optional `message` to send in the email.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post-user-account-events"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "message-greater-than-max-length": {
                    "value": "Property \"message\": Value can be at most 100 characters"
                  },
                  "email-greater-than-max-length": {
                    "value": "Property \"email\": Value can be at most 256 characters"
                  },
                  "invalid-email-address": {
                    "$ref": "#/components/examples/invalid-email-address"
                  },
                  "missing-emails": {
                    "value": "Property \"emails\" is required",
                    "emails-value-error": {
                      "value": "Property \"emails\": Value must be an array"
                    },
                    "cannot-deactivate-self": {
                      "value": "Cannot deactivate / reactivate self"
                    },
                    "missing-event": {
                      "value": "Property \"event\" is required"
                    },
                    "invalid-event-error": {
                      "value": "Property \"event\": Value must be one of “deactivate” or “reactivate”"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "List items within a spot",
        "description": "Lists items within a spot\n\n__Note__ An item may be an original or a bookmark. If an item is a bookmark, the following object will be present in the response json\n```\n\"bookmark\": {\n  \"from_id\": \"5d797aad8b0ed4484c425e82\",\n  \"original_id\": \"a7743c8154b78b8f30ff1d21\"\n}\n```\n- `from_id` this is the item from which the bookmark was created. It can be the id of an item or another bookmark\n- `original_id` this is the original item to which the bookmark refers.  It is never a bookmark\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "spot",
            "in": "query",
            "description": "The spot id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "query",
            "description": "The list id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request, starting from 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items returned. **Default is 100 items**.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Items returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/items"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "invalid-spot-id": {
                    "$ref": "#/components/examples/invalid-spot-format"
                  },
                  "invalid-list-id": {
                    "$ref": "#/components/examples/invalid-list-format"
                  },
                  "start-or-limit-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than “limit”, “start”, “list”, and “spot\")"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "list-does-not-exist": {
                    "$ref": "#/components/examples/list-dne"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create item",
        "description": "Creates an item in a spot by uploading a file, or by specifying the item to create\n\nNote that only one of either __file__ _or_ __item-spec__ must be provided\n\nChoose content type __multipart/form-data__ to provide a __file__ to be uploaded as an item\n\nChoose content type __application/json__ to provide an item specification in __item-spec__ to create an item.\nCurrently, the only `type`s supported are `web_link` and `smartpage`.\n\nThe item metadata can be created by supplying a JSON object in the `metadata` query parameter. The following metadata\ncan be applied: `title`, `description`, `title_external`, `description_external`, `language`, `author`, `date_created`, `scheduled`, `expires`, `internal`, `custom_usage_label`, `content_owners`, `lists` and `cms`.\n\n__Note__ The recommended way is to pass either the `internal` or `custom_usage_label` field. If `internal` and\n`custom_usage_label` are both passed in, the most restrictive label will be applied. For example, if `internal` = true and\n`custom_usage_label` are supplied, the item will be set to \"Internal\" whereas if `internal` = false and\n`custom_usage_label` are supplied, the passed in custom usage label will be applied. The `custom_usage_label` field is case insensitive.\nIf neither the `internal` nor the `custom_usage_label` fields are set, then the item will have the label that is set as the default\nfor the domain. If no default is set for the domain, the `external` label will be used.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "spot",
            "in": "query",
            "description": "The spot in which to create the item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/metadata"
          }
        ],
        "x-codegen-request-body-name": "item-spec",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The file to upload to the spot",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/item-spec"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "no-file-provided": {
                    "$ref": "#/components/examples/no-file-provided"
                  },
                  "form-data-not-found": {
                    "$ref": "#/components/examples/form-data-not-found"
                  },
                  "incorrect-file-count": {
                    "$ref": "#/components/examples/incorrect-file-count"
                  },
                  "unknown-item-type": {
                    "value": "Unknown item type \u003Ctype\u003E"
                  },
                  "url-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "url-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "url-required": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "type-required": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "item-spec-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "unsupported-property-item-spec": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"type\" and \"url\")"
                  },
                  "unsupported-content-type": {
                    "$ref": "#/components/examples/unsupported-content-type"
                  },
                  "http-https-required": {
                    "$ref": "#/components/examples/http-https-error"
                  },
                  "cannot-identify-content-type": {
                    "$ref": "#/components/examples/cannot-identify-content-type"
                  },
                  "invalid-url-parameter": {
                    "$ref": "#/components/examples/invalid-url-params"
                  },
                  "invalid-add-item-params": {
                    "$ref": "#/components/examples/invalid-item-params"
                  },
                  "invalid-custom-usage": {
                    "$ref": "#/components/examples/invalid-custom-usage-label"
                  },
                  "cannot-add-item-to-folder": {
                    "$ref": "#/components/examples/cannot-add-item-to-folder"
                  },
                  "cannot-add-item-to-query": {
                    "$ref": "#/components/examples/cannot-add-item-to-query"
                  },
                  "invalid-date-created": {
                    "$ref": "#/components/examples/invalid-date-created"
                  },
                  "id-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "spot-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "title-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "description-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "author-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "custom_usage_label-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "date_created-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "list_id-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "title-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-200-characters"
                  },
                  "author-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-200-characters"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-2000-characters"
                  },
                  "list-id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-64-characters"
                  },
                  "title-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "date_created-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "date_created-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "custom_usage_label-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-36-characters"
                  },
                  "internal-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "lists-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "unsupported-property-item-metadata": {
                    "$ref": "#/components/examples/unsupported-property-item-metadata"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  },
                  "list-does-not-exist": {
                    "$ref": "#/components/examples/list-dne"
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/{item}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get metadata",
        "description": "Returns item metadata\n\n__Note__ An item may be an original or a bookmark. If an item is a bookmark, the following object will be present in the response json\n```\n\"bookmark\": {\n  \"from_id\": \"5d797aad8b0ed4484c425e82\",\n  \"original_id\": \"a7743c8154b78b8f30ff1d21\"\n}\n```\n- `from_id` this is the item from which the bookmark was created. It can be the id of an item or another bookmark\n- `original_id` this is the original item to which the bookmark refers.  It is never a bookmark\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "responses": {
          "200": {
            "description": "Item metadata returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "patch": {
        "tags": [
          "Items"
        ],
        "summary": "Update metadata",
        "description": "Updates item metadata. The following fields can be updated: `title`, `description`, `title_external`, `description_external`, `language`, `author`, `date_created`,\n`scheduled`, `expires`, `internal`, `custom_usage_label`, `content_owners`, `lists` and `cms`.\n\n__Note__ The recommended way is to pass either the `internal` or `custom_usage_label` field. If `internal` and\n`custom_usage_label` are both passed in, the most restrictive label will be applied. For example, if `internal` = true and\n`custom_usage_label` are supplied, the item will be set to \"Internal\" whereas if `internal` = false and\n`custom_usage_label` are supplied, the passed in custom usage label will be applied. The `custom_usage_label` field is case insensitive.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The item metadata to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch-item"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Item metadata updated successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "id-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "spot_id-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "title-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "description-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "author-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "custom_usage_label-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "date_created-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "list_id-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "title-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "date_created-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "title-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-200-characters"
                  },
                  "author-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-200-characters"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-2000-characters"
                  },
                  "date_created-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "lists-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "list_id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-64-characters"
                  },
                  "custom_usage_label-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-36-characters"
                  },
                  "internal-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "unsupported-property-item-metadata": {
                    "$ref": "#/components/examples/unsupported-property-item-metadata"
                  },
                  "invalid-custom-usage": {
                    "$ref": "#/components/examples/invalid-custom-usage-label"
                  },
                  "cannot-add-item-to-folder": {
                    "$ref": "#/components/examples/cannot-add-item-to-folder"
                  },
                  "cannot-add-item-to-query": {
                    "$ref": "#/components/examples/cannot-add-item-to-query"
                  },
                  "cant-set-property-on-bookmarked-items": {
                    "value": "Can’t set {property} on bookmarked items"
                  },
                  "invalid-date-created": {
                    "$ref": "#/components/examples/invalid-date-created"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "list-does-not-exist": {
                    "$ref": "#/components/examples/list-dne"
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/{item}/bookmarks": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get bookmarks",
        "description": "Gets a list of bookmark ids for this item\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmarks returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bookmarks"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/{item}/content": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get content",
        "description": "Gets the content for an item\n\n __Note__ There are rate-limits configured for some of the item kinds. \n  If item kind is `smartpage` - rate-limit is set to __1000__ requests per user per minute and if it is `report` - rate-limit\n  is __1__ request per user per minute\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format to return content as\n\nFor Reports this parameter is required and must be the value 'text/csv'\n\nFor all other types this parameter is currently ignored\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request\n\nFor Reports this parameter can be used to override the starting date for the result set\n\nFor all other types this parameter is currently ignored\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content returned successfully",
            "content": {
              "application/json": {
                "description": "Returns the structured content of an item. Only SmartPage supported",
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/smartpage"
                    }
                  ]
                }
              },
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "cannot-download": {
                    "$ref": "#/components/examples/cannot-download-item"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/{item}/cms/metadata": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get CMS metadata",
        "description": "Gets the metadata of an item the was imported through an external CMS for providers that support it\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "responses": {
          "200": {
            "description": "CMS metadata returned successfully",
            "content": {

            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/{item}/thumbnail": {
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Set thumbnail",
        "description": "Sets the thumbnail image for an item\n\nA thumbnail may only be set for items that allow for custom thumbnails\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "filename"
                ],
                "properties": {
                  "filename": {
                    "type": "string",
                    "description": "The thumbnail image to set for the item",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thumbnail image set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "invalid-image-format": {
                    "$ref": "#/components/examples/invalid-image-format"
                  },
                  "file-not-provided": {
                    "$ref": "#/components/examples/file-not-provided"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "missing-file": {
                    "value": "Missing File"
                  },
                  "file-not-array": {
                    "value": "File not array"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "501": {
            "$ref": "#/components/responses/NotImplementedForItem"
          }
        }
      }
    },
    "/items/{item}/thumbnails": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get thumbnails",
        "description": "Gets a set of possible thumbnails for an item\n\nThumbnails may only be queried for web links\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "responses": {
          "200": {
            "description": "Thumbnails returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/thumbnails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "invalid-url-parameter": {
                    "$ref": "#/components/examples/invalid-url-params"
                  },
                  "missing-url-parameter": {
                    "$ref": "#/components/examples/missing-url-params"
                  },
                  "http-https-required": {
                    "$ref": "#/components/examples/http-https-error"
                  },
                  "cannot-identify-content-type": {
                    "$ref": "#/components/examples/cannot-identify-content-type"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/{item}/properties": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get properties",
        "description": "Returns all item properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "responses": {
          "200": {
            "description": "Item properties returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item-properties"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Set properties",
        "description": "Sets all item properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The item properties to set",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Item properties set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "invalid-properties": {
                    "$ref": "#/components/examples/invalid-properties"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Add or update properties",
        "description": "Adds or updates the item properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The item properties to set",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Item properties set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "invalid-properties": {
                    "$ref": "#/components/examples/invalid-properties"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/{item}/properties/{property}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get property",
        "description": "Returns an item property",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          },
          {
            "name": "property",
            "in": "path",
            "description": "The property name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item property returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/property-value"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownKey"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Set property",
        "description": "Sets an item property",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          },
          {
            "$ref": "#/components/parameters/property"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The property value to set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/property-value"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Item property set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "invalid-properties": {
                    "$ref": "#/components/examples/invalid-properties"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete property",
        "description": "Deletes an item property",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          },
          {
            "$ref": "#/components/parameters/property"
          }
        ],
        "responses": {
          "200": {
            "description": "Item property deleted successfully",
            "content": {

            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/{item}/versions": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Add a new version of an item",
        "description": "Adds a new version of an item by uploading a file, or by specifying the item to update\n\nNote that only one of either __file__ _or_ __item-spec__ must be provided\n\nSelect a parameter content type of __multipart/form-data__ and provide a __file__ to submit the content of an item\n\nSelect a parameter content type of __application/json__ and provide an item specification in __item-spec__ to create an item\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          },
          {
            "$ref": "#/components/parameters/metadata"
          }
        ],
        "x-codegen-request-body-name": "item-spec",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The file to upload to the spot",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/item-spec"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "url-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "url-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "url-required": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "type-required": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "item-spec-not-an-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "unsupported-content-type": {
                    "$ref": "#/components/examples/unsupported-content-type"
                  },
                  "invalid-embed-code": {
                    "$ref": "#/components/examples/invalid-embed-code"
                  },
                  "incorrect-file-count": {
                    "$ref": "#/components/examples/incorrect-file-count"
                  },
                  "form-data-not-found": {
                    "$ref": "#/components/examples/form-data-not-found"
                  },
                  "no-file-provided": {
                    "$ref": "#/components/examples/no-file-provided"
                  },
                  "id-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "spot-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "title-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "description-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "author-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "custom_usage_label-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "date_created-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "list-id-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "title-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "title-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-200-characters"
                  },
                  "author-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-200-characters"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-2000-characters"
                  },
                  "date_created-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "date_created-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "custom_usage_label-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-36-characters"
                  },
                  "internal-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "lists-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "list-id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-64-characters"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "cannot-add-item-to-folder": {
                    "$ref": "#/components/examples/cannot-add-item-to-folder"
                  },
                  "cannot-add-item-to-query": {
                    "$ref": "#/components/examples/cannot-add-item-to-query"
                  },
                  "invalid-date": {
                    "$ref": "#/components/examples/invalid-date-created"
                  },
                  "unknown-item-type": {
                    "value": "Unknown item type \u003Ctype\u003E"
                  },
                  "invalid-params": {
                    "value": "Invalid add item version parameters"
                  },
                  "cant-set-property-on-bookmarked-items": {
                    "value": "Can’t set {property} on bookmarked items"
                  },
                  "unsupported-property-item-spec": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"type\" and \"url\")"
                  },
                  "unsupported-property-item-metadata": {
                    "$ref": "#/components/examples/unsupported-property-item-metadata"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "unauthorized": {
                    "value": "Not authorized"
                  },
                  "unauthorized-to-edit-item": {
                    "value": "You do not have permission to edit this item"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/batch": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Perform bulk archive, bookmark, delete, move and set expiration date operations",
        "description": "Batch one or more operations in one request. Each operation can be performed on a list of items, or\nin the case of bookmark, create a collection of items from other entities.\nThe following operations are supported: bookmark, move, archive, delete, restore and set expiration date.\nBookmark batch operations are mutually exclusive. A batch bookmark request must specify exactly one\nof \"items\", \"users\", or \"spots\".\n\u003Cbr/\u003E\n\u003Cbr/\u003E\n\u003Cb\u003EThe request requires an array with one or more of the following types of objects\u003C/b\u003E\n\n__archive__ __object__\n```\n{ \"archive\": { \"items\": [ \"list of items ids\" ], \"message\": \"Archiving this itemp\" } }\n```\n\u003Cbr\u003E\n__bookmark__ __object__\n```\n{ \"bookmark\": { \"items\": [ \"list of item ids\" ], \"target_spot\": \"destination spot-id\" } }\n{ \"bookmark\": { \"spots\": [ \"list of spot ids\" ], \"target_spot\": \"destination spot-id\" } }\n{ \"bookmark\": { \"users\": [ \"list of user ids\" ], \"target_spot\": \"destination spot-id\" } }\n```\n\u003Cbr\u003E\n__delete__ __object__\n```\n{ \"delete\": { \"items\": [ \"list of items ids\" ], \"message\": \"Deleting this item\" } }\n\n```\n\u003Cbr\u003E\n__move__ __object__\n```\n{ \"move\": { \"items\": [ \"list of items ids\" ], \"spot\": \"destination spot-id\", \"with_lists\": true, \"lists\": [] } }\n```\n\u003Cbr\u003E\n__restore__ __object__\n```\n{ \"restore\": { \"items\": [ \"list of items ids\" ] } }\n```\n\u003Cbr\u003E\n__set_expiration__ __object__\n```\n{ \"set_options\":  { \"items\": [ \"list of items ids\" ] }, \"value\": { \"expires\": \"YYYY-MM-dd\" } }\n```\n\u003Cbr\u003E\n__Example Request__\n```\n[{\"bookmark\":{\"items\":[\"5bd0ce7a8b0ed42083512b09\"],\"target_spot\":\"5b60c3e48cc7ae4481364b34\"}},{\"set_options\":{\"items\":[\"5bc670148b0ed425d7b7423e\"],\"value\":{\"expires\":\"2520-12-16\"}}}]\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "x-codegen-request-body-name": "batch-spec",
        "requestBody": {
          "description": "The specification of the item to update",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/async-batch-spec"
                  },
                  {
                    "$ref": "#/components/schemas/batch-spec"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Item updated successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "items-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "item-id-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "spot-id-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "list-id-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "request-not-array": {
                    "value": "Request must be an array"
                  },
                  "item-id-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-24-characters"
                  },
                  "item-id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-24-characters"
                  },
                  "spot-id-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-24-characters"
                  },
                  "spot-id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-24-characters"
                  },
                  "list-id-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-24-characters"
                  },
                  "list-id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-24-characters"
                  },
                  "message-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "expires-invalid-date": {
                    "$ref": "#/components/examples/invalid-date"
                  },
                  "with_lists-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "lists-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "items-required-for-any-action": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "message-required-for-archive": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "message-required-for-delete": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "spot-required-for-bookmark": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "spot-required-for-move": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "value-required-for-set_options": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "expires-required-for-value": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "unrecognized-object": {
                    "$ref": "#/components/examples/unrecognized-object"
                  },
                  "invalid-params": {
                    "$ref": "#/components/examples/invalid-item-params"
                  },
                  "expiration-before-availability-date": {
                    "value": "Expiration date must be after availability date"
                  },
                  "cant-set-option": {
                    "value": "Can’t set option \u003Coption\u003E on this item"
                  },
                  "item-not-in-spot": {
                    "value": "Item is not in the right spot \u003Citem_id\u003E"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than \"items\" for actions \"restore\", \"items\" and \"message\" for actions \"archive\" and \"delete\",\"items\" and \"spot\" for actions \"bookmark\" and \"move\", \"items\" and \"value\" for action \"set_options\", and \"expires\" within \"value\" for action \"set_options\")"
                  },
                  "cannot-bookmark-archived-items": {
                    "value": "Cannot bookmark archived item(s): \u003Citem_ids\u003E"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "unauthorized": {
                    "value": "Not authorized"
                  },
                  "item-not-authorized": {
                    "value": "Not authorized: {item_id}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/items/{item}/weblink": {
      "put": {
        "summary": "Change URL of a weblink item",
        "description": "Updates the URL of a weblink item",
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The URL value to set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/item-weblink-url"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Item url set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "item-not-valid": {
                    "$ref": "#/components/examples/item-not-valid"
                  },
                  "invalid-url-params": {
                    "$ref": "#/components/examples/invalid-url-params"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List groups",
        "description": "Lists groups",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role to filter groups by",
            "schema": {
              "type": "string",
              "enum": [
                "editor",
                "viewer",
                "manager",
                "owner"
              ]
            }
          },
          {
            "name": "right",
            "in": "query",
            "description": "Right to filter groups by",
            "schema": {
              "type": "string",
              "enum": [
                "edit",
                "view",
                "manage"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request, starting from 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of groups returned",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groups"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "limit-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "start-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "role-value-error": {
                    "$ref": "#/components/examples/role-value-error"
                  },
                  "right-value-error": {
                    "$ref": "#/components/examples/right-value-error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create group",
        "description": "Creates a group",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The group details * title (required) * description * visibility - possible values are: private, public, shared_and_members, shared\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group-post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/id-response-object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-bad-request-error"
                },
                "examples": {
                  "duplicate-group": {
                    "value": {
                      "errors": {
                        "title": "Duplicate group title"
                      },
                      "props": {

                      }
                    }
                  },
                  "invalid-visibility": {
                    "value": {
                      "errors": {
                        "permission": "Invalid visibility setting: \u003Cvalue\u003E"
                      },
                      "props": {

                      }
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "id-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "title-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "description-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "title-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "description-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "title-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-1000-characters"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "title-required": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "visibility-error": {
                    "$ref": "#/components/examples/visibility-private-public-shared-members-error"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than \"title\", \"description\", and \"visibility\")"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/groups/{group}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get metadata",
        "description": "Returns group metadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          }
        ],
        "responses": {
          "200": {
            "description": "Group metadata returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-does-not-exist": {
                    "$ref": "#/components/examples/group-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-deleted": {
                    "$ref": "#/components/examples/group-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Update metadata",
        "description": "Updates group metadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The group metadata to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch-group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group metadata updated successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "id-readonly": {
                    "$ref": "#/components/examples/readonly-error"
                  },
                  "title-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "description-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "title-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "description-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "title-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-1000-characters"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than \"title\", \"description\", \"id\")"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-bad-request-error"
                },
                "examples": {
                  "duplicate-group": {
                    "value": {
                      "errors": {
                        "title": "Duplicate group title"
                      },
                      "props": {

                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "unauthorized": {
                    "value": "Not authorized"
                  },
                  "group-unmodifiable": {
                    "value": "Cannot modify system groups"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-does-not-exist": {
                    "$ref": "#/components/examples/group-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-deleted": {
                    "$ref": "#/components/examples/group-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/groups/{group}/members": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List members",
        "description": "Lists members of a group",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request, starting from 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of members returned",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group members returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/users"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "limit-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "start-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-does-not-exist": {
                    "$ref": "#/components/examples/group-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-deleted": {
                    "$ref": "#/components/examples/group-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add members",
        "description": "Add members to a group",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The user ids of the users to add to the group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ids"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group members added successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "missing-group-id": {
                    "$ref": "#/components/examples/missing-info"
                  },
                  "missing-user-emails": {
                    "value": "examples.yaml#/missing-info"
                  },
                  "value-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "unknown-user": {
                    "value": "Unknown user \u003Cuser id\u003E"
                  },
                  "group-names-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "user-emails-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "group-names-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "user-emails-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/json-bad-request-error"
                    },
                    {
                      "$ref": "#/components/schemas/json-validation-error"
                    }
                  ]
                },
                "examples": {
                  "group-unmanaged": {
                    "value": {
                      "errors": {
                        "membership": "Group is not managed"
                      },
                      "props": {

                      }
                    }
                  },
                  "email-invalid": {
                    "$ref": "#/components/examples/email-invalid"
                  },
                  "member-never-logged-in": {
                    "value": {
                      "name": "\u003Cemail\u003E",
                      "warning": "NOT_REGISTERED",
                      "message": "has never logged in"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-does-not-exist": {
                    "$ref": "#/components/examples/group-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-deleted": {
                    "$ref": "#/components/examples/group-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/groups/{group}/members/{member}": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove member",
        "description": "Removes a member from a group",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          },
          {
            "$ref": "#/components/parameters/member"
          }
        ],
        "responses": {
          "200": {
            "description": "Group member removed successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "missing-group-id": {
                    "$ref": "#/components/examples/missing-info"
                  },
                  "missing-user-ids": {
                    "value": "examples.yaml#/missing-info"
                  },
                  "unknown-user": {
                    "value": "Unknown user \u003Cuser id\u003E"
                  },
                  "user-in-other-domain": {
                    "value": "User \u003Cuser id\u003E is in a different domain"
                  },
                  "invalid-params": {
                    "$ref": "#/components/examples/invalid-item-params"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-does-not-exist": {
                    "$ref": "#/components/examples/group-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-deleted": {
                    "$ref": "#/components/examples/group-deleted"
                  },
                  "user-deleted": {
                    "$ref": "#/components/examples/user-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/groups/{group}/properties": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get properties",
        "description": "Returns all group properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          }
        ],
        "responses": {
          "200": {
            "description": "Group properties returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group-properties"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Set properties",
        "description": "Sets all the group properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The group properties to set",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group properties set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "invalid-properties": {
                    "$ref": "#/components/examples/invalid-properties"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add or update properties",
        "description": "Adds or updates the group properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The group properties to set",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group properties set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "invalid-properties": {
                    "$ref": "#/components/examples/invalid-properties"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownEntity"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/groups/{group}/properties/{property}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get property",
        "description": "Returns a group property",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          },
          {
            "$ref": "#/components/parameters/property"
          }
        ],
        "responses": {
          "200": {
            "description": "Group property returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/property-value"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/UnknownKey"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Set property",
        "description": "Sets a group property",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          },
          {
            "$ref": "#/components/parameters/property"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The property value to set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/property-value"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group property set successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "key-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "value-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "properties-greater-than-max-count": {
                    "$ref": "#/components/examples/maximum-properties-count"
                  },
                  "value-characters-invalid": {
                    "$ref": "#/components/examples/value-characters-invalid"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "invalid-properties": {
                    "$ref": "#/components/examples/invalid-properties"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"value\")"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove property",
        "description": "Removes a property from a group",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          },
          {
            "$ref": "#/components/parameters/property"
          }
        ],
        "responses": {
          "200": {
            "description": "Group property removed successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "missing-group-id": {
                    "$ref": "#/components/examples/missing-info"
                  },
                  "missing-user-ids": {
                    "value": "examples.yaml#/missing-info"
                  },
                  "unknown-user": {
                    "value": "Unknown user \u003Cuser id\u003E"
                  },
                  "user-in-other-domain": {
                    "value": "User \u003Cuser id\u003E is in a different domain"
                  },
                  "invalid-params": {
                    "$ref": "#/components/examples/invalid-item-params"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "group-does-not-exist": {
                    "$ref": "#/components/examples/group-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/groups/{group}/settings/permissions": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Update permissions to the group",
        "description": "| Field Name | Description |  Accepted Values / Examples |\n| ---------- | :---------: |  -------------------------: |\n| batch      | Allows changes to the Group’s permissions; Users or groups can be added, updated, removed as co_owner, owner, editor, viewer.   | See Request Body Example Value. \u003Cbr\u003EThe accepted values for PERMISSION are: \"co_owner\", \"owner\", \"editor\", \"viewer\" |\n| notify | determines whether users are sent a notification of the permissions they were granted.   |  true, false    |\n| message   | contains the text of the notification.    |  \"Welcome to the group.\"    |\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post-group-settings-permissions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group permissions settings updated successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "post-group-settings-permissions-request-body-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "unsupported-property-post-group-settings-permissions": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"batch\", \"ignoreWarnings\", \"notify\" and \"message\")"
                  },
                  "batch-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "ignoreWarnings-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "notify-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "message-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "message-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "add-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "users-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "groups-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "update-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "remove-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "invalid-permission-error": {
                    "value": "Permission must be one of [\"editor\", \"viewer\", \"co_owner\", \"owner\"]"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-validation-error"
                },
                "examples": {
                  "email-invalid": {
                    "$ref": "#/components/examples/email-invalid"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Not authorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/groups/{group}/settings/visibility": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update the group’s visibility settings",
        "description": "### **Visibility options can be set to be one of the following:** * \"private\" - The group will only be visible to the Group Owner.\n* \"shared\" - The group will be visible to whoever has permissions to view, edit, or co-own it.\n* \"shared_and_members\" - The group will be visible to members of the group and whoever has permissions to view, edit, or co-own it.\n* \"everyone\" - The group will be visible to everyone in the company.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/put-group-settings-visibility"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group visibility settings updated successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "put-group-settings-visibility-request-body-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "unsupported-property-put-group-settings-visibility": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"visibility\")"
                  },
                  "visibility-value-error": {
                    "value": "Property ‘visibility’: Value must be one of [\"private\" \"everyone\" \"shared\" \"shared_and_members\"]"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Not authorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/groups/{group}/settings/basics": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update the group’s settings",
        "description": "| Field Name | Description |  Accepted Values / Examples |\n| ---------- | :---------: |  -------------------------: |\n| title      | Updates the group title.   | \"Sales Enablement - North America\" |\n| description     | Updates the group description.    |  \"Users in the Sales Enablement group within North America.\"  |\n| promoted     |  Determines if Promoted Spots and People are enabled.   |  true, false  |\n| hide_pitch_share_emails     |  Determines if emails from shared pitches are stored and displayed.   |  true, false  |\n| author_pages     |  Determines if members can author SmartPages.   |  true, false  |\n| author_smartpage_templates     |  Determines if members can author SmartPage Templates.   |  true, false  |\n| pitch_tracking    |  Determines the pitch tracking policy for members.   |  The value can be set to one of the following: \u003Cbr\u003E\"all\": Pitch tracking is enabled for all members. \u003Cbr\u003E\"opt-out\": Pitch tracking is enabled for all members, but recipients can opt out of tracking. \u003Cbr\u003E\"ask\": Pitch recipients must provide consent. \u003Cbr\u003E\"none\": Pitch tracking is disabled for all members. |\n| enable_pitch_collect_recipients_email     |  Determines if pitch recipients’ emails are collected.   |  true, false  |\n| google_drive_managed_access     |  Determines if members have access to Google Drive Managed Access in Add Files.   |  true, false  |\n| quip_managed_access     |  Determines if members have access to Quip Managed Access in Add Files.   |  true, false  |\n| brainshark_learning     |  Determines if members have access to the Brainshark Learning tab.   |  true, false  |\n| brainshark_coaching     |  Determines if members have access to the Brainshark Coaching tab.   |  true, false  |\n| mindtickle     |  Determines if members have access to Mindtickle in Add Files.   |  true, false  |\n| drift     |  Determines if members have access to the Drift Bot on the Pitch Content Viewer.   |  true, false  |\n| lessonly     |  Determines if members have access to Lessonly in Add Files.   |  true, false  |\n| trailhead     |  Determines if members have access to Trailhead in Add Files.   |  true, false  |\n| training     |  Determines if members can author learning activities.   |  true, false  |\n| training_reports     |  Determines if members can access Training Performance reports in the Analytics tab.   |  true, false  |\n| configure_essential_offline_content     |  Determines if members can set spots as essential offline content.   |  true, false  |\n| publish_to_marketplace     |  Determines if members can enable publishing spots.   |  true, false  |\n| consume_from_marketplace     |  Determines if members can add spots from the Highspot Marketplace.   |  true, false  |\n| salesforce_spot_relation     |  Determines if members can associate Salesforce objects with spots.   |  true, false  |\n| restrict_remix | Determines if members can remix items. Allowed only if set to Group level for domain. | true, false |\n| restrict_edit_copy | Determines if members can edit and copy items.Allowed only if set to Group level for domain. | true, false |\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/group"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/put-group-settings-basics"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group basics settings updated successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "put-group-settings-basics-request-body-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "title-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "unsupported-property-put-group-settings-basics": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields listed in the table above.)"
                  },
                  "title-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "description-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "author_pages-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "author_smartpage_templates-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "hide_pitch_share_emails-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "promoted-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "pitch_tracking-value-error": {
                    "$ref": "#/components/examples/pitch_tracking-value-error"
                  },
                  "enable_pitch_collect_recipients_email-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "google_drive_managed_access-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "quip_managed_access-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "brainshark_learning-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "brainshark_coaching-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "mindtickle-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "drift-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "lessonly-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "trailhead-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "training-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "training_reports-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "configure_essential_offline_content-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "publish_to_marketplace-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "consume_from_marketplace-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  },
                  "salesforce_spot_relation-not-boolean": {
                    "$ref": "#/components/examples/not-boolean-error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Not authorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/spots": {
      "get": {
        "tags": [
          "Spots"
        ],
        "summary": "List spots",
        "description": "Lists spots for the user's domain. Spots can be filtered by the query params \"role\", \"right\", \"is-official\", \"start\", and \"\"limit\"\"; \"role\" and \"right\" cannot be combined - one or the other must be chosen. The default role is \"owner\" if neither role, right, or is_official are specified. The default role is \"owner\" if \"is_official\" is specified but neither role nor right are specified.",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role to filter spots by",
            "schema": {
              "type": "string",
              "enum": [
                "editor",
                "viewer",
                "manager",
                "owner"
              ]
            }
          },
          {
            "name": "right",
            "in": "query",
            "description": "Right to filter spots by",
            "schema": {
              "type": "string",
              "enum": [
                "edit",
                "view",
                "manage"
              ]
            }
          },
          {
            "name": "is-official",
            "in": "query",
            "description": "Filter by if is official",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request, starting from 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of spots returned. **Maximum is 100 for Spot Super Admins**.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Spots listed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spots"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "limit-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "start-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "role-value-error": {
                    "$ref": "#/components/examples/role-value-error"
                  },
                  "right-value-error": {
                    "$ref": "#/components/examples/right-value-error"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (Query params must be one of \"limit\", \"start\", \"right\", or \"role\" )"
                  },
                  "cannot-set-both-role-and-right": {
                    "value": "Can't set both 'role' and 'right'"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Spots"
        ],
        "summary": "Create spot",
        "description": "Creates a spot\n\nIn the post object, only title is required\n\nPossible values for visibility are: private, public, shared\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The spot details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/spot-post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Spot created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/id-response-object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-bad-request-error"
                },
                "examples": {
                  "duplicate-spot": {
                    "value": {
                      "errors": {
                        "title": "Duplicate spot title"
                      },
                      "props": {

                      }
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "title-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "desrciption-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "visibility-error": {
                    "$ref": "#/components/examples/visibility-private-public-share-error"
                  },
                  "title-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "description-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "title-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-1000-characters"
                  },
                  "title-required": {
                    "$ref": "#/components/examples/property-required"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than \"title\", \"description\", and \"visibility\")"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/spots/{spot}": {
      "get": {
        "tags": [
          "Spots"
        ],
        "summary": "Get metadata",
        "description": "Returns spot metadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          }
        ],
        "responses": {
          "200": {
            "description": "Spot metadata returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spot"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "user-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "user-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "patch": {
        "tags": [
          "Spots"
        ],
        "summary": "Update metadata",
        "description": "Updates spot metadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The spot metadata to update * title - Updates spot title * description - Updates the spot description * is_official - Updates the \"official_content\" property for a Spot. Possible values are true/false * visibility - possible values are: private, public, shared * NOTE - visibility cannot be set with other fields\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch-spot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Spot metadata updated successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "visibility-error": {
                    "$ref": "#/components/examples/visibility-private-public-share-error"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E must be \"visibility\")"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Spots"
        ],
        "summary": "Delete spot",
        "description": "Deletes a spot",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          }
        ],
        "responses": {
          "200": {
            "description": "Spot deleted successfully",
            "content": {

            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "user-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/spots/{spot}/users": {
      "post": {
        "tags": [
          "Spots"
        ],
        "summary": "Add users",
        "description": "Adds users to a spot",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          },
          {
            "name": "message",
            "in": "query",
            "description": "Optional note for users being added to the spot. (blank to not notify users)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role of users or groups to set.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "viewer",
                "editor",
                "manager"
              ]
            }
          }
        ],
        "x-codegen-request-body-name": "users",
        "requestBody": {
          "description": "The user emails and group ids of the groups to add to the spot",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/spot-users"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Users added successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-bad-request-error"
                },
                "examples": {
                  "email-invalid": {
                    "$ref": "#/components/examples/email-invalid"
                  },
                  "invalid-domain-user": {
                    "value": {
                      "name": "\u003Cname\u003E",
                      "type": "Domain",
                      "message": "because they are not a {domain_id} user"
                    }
                  },
                  "member-never-logged-in": {
                    "value": {
                      "name": "\u003Cemail\u003E",
                      "warning": "NOT_REGISTERED",
                      "message": "has never logged in"
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "message-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "role-value-error": {
                    "$ref": "#/components/examples/role-value-error"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-1000-characters"
                  },
                  "message-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "emails-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "group-names-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "emails-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "group-names-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-100-characters"
                  },
                  "value-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "private-spot": {
                    "value": "Unable to change membership of private spot"
                  },
                  "invalid-parameters": {
                    "value": "Invalid update members parameters"
                  },
                  "unsupported-params-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E must be one of \"message\" or \"role\")"
                  },
                  "unsupported-body-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E must be one of ‘users’ and/or ‘groups’)"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/spots/{spot}/lists": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "List local and global lists",
        "description": "Returns lccal and global lists in a spot",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lists"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "410": {
            "$ref": "#/components/responses/Gone"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Lists"
        ],
        "summary": "Add local list",
        "description": "Adds a local list to a spot",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          }
        ],
        "requestBody": {
          "description": "The list to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add-list"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Lists added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lists"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "name-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "name-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-10000-characters"
                  },
                  "featured-value-error": {
                    "$ref": "#/components/examples/featured-value-error"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than \"name\", \"description\", \"featured\" or \"children\")"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "list-type-value-error": {
                    "$ref": "#/components/examples/list-type-value-error"
                  },
                  "not-string-error": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "children-value-error": {
                    "$ref": "#/components/examples/children-value-error"
                  },
                  "name-required": {
                    "$ref": "#/components/examples/name-required"
                  },
                  "list-type-error": {
                    "$ref": "#/components/examples/list-type-error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "410": {
            "$ref": "#/components/responses/Gone"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/spots/{spot}/lists/{list}": {
      "delete": {
        "tags": [
          "Lists"
        ],
        "summary": "Delete local list",
        "description": "Deletes a local list",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          },
          {
            "$ref": "#/components/parameters/list"
          }
        ],
        "responses": {
          "200": {
            "description": "List deleted successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "cannot-delete-system-list": {
                    "$ref": "#/components/examples/cannot-delete-system-list"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "list-does-not-exist": {
                    "$ref": "#/components/examples/list-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "list-deleted": {
                    "$ref": "#/components/examples/list-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/spots/{spot}/lists/{list}/items": {
      "post": {
        "tags": [
          "Lists"
        ],
        "summary": "Adds items to global or local list in spot.",
        "description": "Adds items to a global or local list in spot.",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          },
          {
            "$ref": "#/components/parameters/list"
          }
        ],
        "x-codegen-request-body-name": "items",
        "requestBody": {
          "description": "The item ids of the items to add to the list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ids"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Items added successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "value-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "value-array-max-elements": {
                    "$ref": "#/components/examples/value-array-max-elements"
                  },
                  "unknown-user": {
                    "value": "Unknown user \u003Cuser id\u003E"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/json-bad-request-error"
                    },
                    {
                      "$ref": "#/components/schemas/json-validation-error"
                    }
                  ]
                },
                "examples": {
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "list-does-not-exist": {
                    "$ref": "#/components/examples/list-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "list-deleted": {
                    "$ref": "#/components/examples/list-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/spots/{spot}/lists/{list}/items/{item}": {
      "delete": {
        "tags": [
          "Lists"
        ],
        "summary": "Removes item from a list",
        "description": "Removes items from a list",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          },
          {
            "$ref": "#/components/parameters/list"
          },
          {
            "$ref": "#/components/parameters/item"
          }
        ],
        "responses": {
          "200": {
            "description": "Item removed successfully",
            "content": {

            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-does-not-exist": {
                    "$ref": "#/components/examples/spot-does-not-exist"
                  },
                  "list-does-not-exist": {
                    "$ref": "#/components/examples/list-does-not-exist"
                  },
                  "item-does-not-exist": {
                    "$ref": "#/components/examples/item-does-not-exist"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "spot-deleted": {
                    "$ref": "#/components/examples/spot-deleted"
                  },
                  "list-deleted": {
                    "$ref": "#/components/examples/list-deleted"
                  },
                  "item-deleted": {
                    "$ref": "#/components/examples/item-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/spots/{spot}/global-lists": {
      "post": {
        "tags": [
          "Lists"
        ],
        "summary": "Add global lists to spot",
        "description": "Adds pre-existing global lists to a spot",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/spot"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The list ids of the global-lists to add to the spot",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ids"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Added global lists successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "spot-id-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-24-characters"
                  },
                  "spot-id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-24-characters"
                  },
                  "list-id-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-24-characters"
                  },
                  "list-id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-24-characters"
                  },
                  "value-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "invalid-payload": {
                    "$ref": "#/components/examples/invalid-payload"
                  },
                  "invalid-list-ids": {
                    "$ref": "#/components/examples/invalid-list-ids"
                  },
                  "not-global-list": {
                    "$ref": "#/components/examples/not-global-list"
                  },
                  "not-global-folder": {
                    "$ref": "#/components/examples/not-global-folder"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/global-lists": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "List global lists",
        "description": "Lists global ists",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Global lists returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lists"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Lists"
        ],
        "summary": "Add global list",
        "description": "Adds a global list",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Parent list to add global list to. Blank, if top-level list.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List details: * `name` (required) * `description` * `type` - possible values: list, list_group. (Defaults to list, or list_group if list has children or is top-level.) * `children` - recursive collection of lists\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add-global-list"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Global lists added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lists"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "name-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "name-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "description-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-10000-characters"
                  },
                  "featured-value-error": {
                    "$ref": "#/components/examples/featured-value-error"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than \"name\", \"description\", \"featured\" or \"children\")"
                  },
                  "duplicate-name": {
                    "value": "A list or list group with name \u003Cname\u003E already exists"
                  },
                  "value-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "list-type-value-error": {
                    "$ref": "#/components/examples/list-type-value-error"
                  },
                  "not-string-error": {
                    "$ref": "#/components/examples/not-string-error"
                  },
                  "children-value-error": {
                    "$ref": "#/components/examples/children-value-error"
                  },
                  "name-required": {
                    "$ref": "#/components/examples/name-required"
                  },
                  "list-type-error": {
                    "$ref": "#/components/examples/list-type-error"
                  },
                  "parent-error": {
                    "value": "Parent is not a list group"
                  },
                  "create-system-list-error": {
                    "value": "Cannot create a system list"
                  },
                  "create-list-group-error": {
                    "value": "Cannot create a list group in a nested list group"
                  },
                  "global-list-id-error": {
                    "value": "\u003Cparent_id\u003E is not a global list"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/global-lists/{list}": {
      "patch": {
        "tags": [
          "Lists"
        ],
        "summary": "Update global list metadata",
        "description": "Updates global list metadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/list"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The global list metadata to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch-global-list"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List metadata updated successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "name-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-1-character"
                  },
                  "name-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-256-characters"
                  },
                  "list-id-less-than-min-length": {
                    "$ref": "#/components/examples/minimum-length-24-characters"
                  },
                  "list-id-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-24-characters"
                  },
                  "cannot-move-into-list": {
                    "$ref": "#/components/examples/cannot-move-into-list"
                  },
                  "duplicate-list-name-error": {
                    "$ref": "#/components/examples/duplicate-list-name-error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The specified resource cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "list-does-not-exist": {
                    "$ref": "#/components/examples/list-does-not-exist"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "list-deleted": {
                    "$ref": "#/components/examples/list-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Lists"
        ],
        "summary": "Delete global list",
        "description": "Deletes a global list",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/list"
          }
        ],
        "responses": {
          "200": {
            "description": "Global list deleted successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "cannot-delete-system-list": {
                    "$ref": "#/components/examples/cannot-delete-system-list"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The specified resource cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  }
                }
              }
            }
          },
          "410": {
            "description": "The specified resource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/json-not-found-error"
                },
                "examples": {
                  "list-deleted": {
                    "$ref": "#/components/examples/list-deleted"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/pitches": {
      "get": {
        "tags": [
          "Pitches"
        ],
        "summary": "List Pitches",
        "description": "Returns a list of the user's pitches",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request, starting from 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pitches returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "25"
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "description": "The ordering of the returned pitches. Sorting options include recent activity (`recent_activity`), alphabetically by name (`alphabetical`), and date created (`date_created`).",
            "required": false,
            "schema": {
              "type": "string",
              "default": "recent_activity",
              "enum": [
                "recent_activity",
                "alphabetical",
                "date_created"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's pitches returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pitches"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "start-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "limit-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "sortby-value-error": {
                    "$ref": "#/components/examples/sortby-value-error"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than “start”, “limit”, and “sortby”,)"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/domain/custom-usage-labels": {
      "get": {
        "tags": [
          "Domain"
        ],
        "summary": "List custom usage labels",
        "description": "Returns the custom usage labels in the user's domain",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom usage labels returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/custom-usage-label"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The specified resource cannot be found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "domain-not-found": {
                    "$ref": "#/components/examples/domain-not-found"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/domain/search/promoted": {
      "get": {
        "tags": [
          "Domain"
        ],
        "summary": "Get existing promoted search results",
        "description": "Lists all Promoted Search Terms and their Associated Items",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request, starting from 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of promoted terms returned",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/promoted-search-result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "limit-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "start-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "post": {
        "tags": [
          "Domain"
        ],
        "summary": "Create a Promoted Search Result",
        "description": "Creates a Promoted Search Term with Associated Items",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The search term and associated item ids",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/promoted-search-body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "search-term-already-exists": {
                    "$ref": "#/components/examples/duplicate-search-term"
                  },
                  "item-not-valid": {
                    "$ref": "#/components/examples/item-not-valid"
                  },
                  "item-in-different-domain": {
                    "$ref": "#/components/examples/item-not-in-domain"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/domain/search/promoted/{term}": {
      "put": {
        "tags": [
          "Domain"
        ],
        "summary": "Replace a Promoted Search Result",
        "description": "Replaces an Existing Promoted Search Term",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "term",
            "in": "path",
            "description": "The search term to replace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codegen-request-body-name": "value",
        "requestBody": {
          "description": "The new search term and item ids",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/promoted-search-body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "term-to-replace-does-not-exist": {
                    "$ref": "#/components/examples/search-term-does-not-exist"
                  },
                  "new-term-already-exists": {
                    "$ref": "#/components/examples/duplicate-search-term"
                  },
                  "item-not-valid": {
                    "$ref": "#/components/examples/item-not-valid"
                  },
                  "item-in-wrong-domain": {
                    "$ref": "#/components/examples/item-not-in-domain"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Domain"
        ],
        "summary": "Deletes a Promoted Search Result",
        "description": "Deletes an Existing Promoted Search Term",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "term",
            "in": "path",
            "description": "The search term to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "search-term-does-not-exist": {
                    "$ref": "#/components/examples/search-term-does-not-exist"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/domain/homepages": {
      "put": {
        "tags": [
          "Domain"
        ],
        "summary": "Set custom homepages",
        "description": "Used for setting custom homepages or disabling if none are provided",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The homepage rules to set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/custom-homepage-body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/domain/administrative_spots": {
      "put": {
        "tags": [
          "Domain"
        ],
        "summary": "Set administrative spots",
        "description": "Set administrative spots",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "requestBody": {
          "description": "The administrative spots to set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/administrative-spots"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/domain/administrative_groups": {
      "put": {
        "tags": [
          "Domain"
        ],
        "summary": "Set administrative groups",
        "description": "Set administrative groups",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "requestBody": {
          "description": "The administrative groups to set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/administrative-groups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/domain/cloudservices": {
      "put": {
        "tags": [
          "Domain"
        ],
        "summary": "Set cloudservices",
        "description": "Enable or disable cloud services including screenshare custom URLs.\nNote that feature flags for some services must be turned on in order for them to be enabled.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "requestBody": {
          "description": "The settings to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudservices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/domain/cloudservices/dynamics": {
      "put": {
        "tags": [
          "Domain"
        ],
        "summary": "Set Dynamics configuration",
        "description": "Allows setting API user for Dynamics CRM integration",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "requestBody": {
          "description": "The Dynamics configuration options",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dynamics-configuration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/domain/cloudservices/salesforce": {
      "put": {
        "tags": [
          "Domain"
        ],
        "summary": "Set Salesforce configuration",
        "description": "Allows setting API user for Salesforce CRM integration",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "requestBody": {
          "description": "The Salesforce configuration options",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/salesforce-configuration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of request returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-ok"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/requests/{id}": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Get asynchronous request status",
        "description": "Returns the status of an asynchronous request\n\nIf the status field is \"pending\" the request is still executing\n\nIf the status field is \"ok\" the request is complete and the result can be queried\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the asynchronous request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status of asynchronous request returned successfully",
            "content": {

            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/requests/{id}/result": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Get asynchronous request result",
        "description": "Returns the result of an asynchronous request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the asynchronous request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Result of asynchronous request returned successfully",
            "content": {

            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "not-completed": {
                    "$ref": "#/components/examples/not-completed-error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/privacy/data-subject": {
      "get": {
        "tags": [
          "Privacy"
        ],
        "summary": "Get all data subject requests from the Privacy Center",
        "description": "Return a list of all submitted data subject requests, including email, type, status, destination spot, date submitted, date completed, and request id\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request, starting from 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items returned. **Default is 100 items**. **Max limit is 1000 items**.",
            "schema": {
              "type": "integer",
              "default": 100,
              "max": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requests returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/requests"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "start-or-limit-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than “limit”, “start”, and “offset\")"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Not authorized for Privacy Center"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/privacy/data-subject/access": {
      "post": {
        "tags": [
          "Privacy"
        ],
        "summary": "Create data subject access requests",
        "description": "Create data subject access requests. Access requests require a list of emails and a destination spot id. The destination spot is where completed reports will be available upon processing. Use the /privacy/data-subject/{request_id} call to find the status of a specific request\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post-access-requests"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requests created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post-access-requests-response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "post-access-requests-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "emails-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "email-greater-than-max-length": {
                    "value": "Email can be at most 256 characters"
                  },
                  "missing-emails": {
                    "value": "Property \"emails\" is required"
                  },
                  "missing-destination-spot": {
                    "value": "Property \"destination_spot\" is required"
                  },
                  "destination-spot-greater-than-max-length": {
                    "$ref": "#/components/examples/maximum-length-4096-characters"
                  },
                  "destination-spot-does-not-exist": {
                    "value": "Destination spot does not exist"
                  },
                  "destination-spot-no-permission": {
                    "value": "You do not have permission to view destination spot"
                  },
                  "unsupported-property-post-access-requests": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"emails\" and \"destination_spot\")"
                  },
                  "email-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Not authorized for Privacy Center"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/privacy/data-subject/delete": {
      "post": {
        "tags": [
          "Privacy"
        ],
        "summary": "Create data subject deletion requests",
        "description": "Create data subject deletion requests. Deletion requests require a list of emails. Deletion requests are permanent and cannot be undone, use with care. Use the /privacy/data-subject/{request_id} call to find the status of a specific request\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post-deletion-requests"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requests created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post-deletion-requests-response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "post-deletion-requests-not-object": {
                    "$ref": "#/components/examples/value-not-object"
                  },
                  "emails-not-array": {
                    "$ref": "#/components/examples/value-not-array"
                  },
                  "email-greater-than-max-length": {
                    "value": "Email can be at most 256 characters"
                  },
                  "missing-emails": {
                    "value": "Property \"emails\" is required"
                  },
                  "unsupported-property-post-deletion-requests": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"emails\")"
                  },
                  "email-not-string": {
                    "$ref": "#/components/examples/not-string-error"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Not authorized for Privacy Center"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/privacy/data-subject/{request_id}": {
      "get": {
        "tags": [
          "Privacy"
        ],
        "summary": "Get a specific data subject request from the Privacy Center",
        "description": "Return meta data for a specific data subject request using a request id. Meta data includes email, type, status, destination spot, date submitted, date completed, and request id\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "$ref": "#/components/parameters/privacy-request"
          }
        ],
        "responses": {
          "200": {
            "description": "Privacy request metadata returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/privacy_requests_request"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "request-id-not-exists": {
                    "value": "Unknown request_id"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "description": "Not authorized for Privacy Center"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/skills": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "List skills of the domain of the requesting API user",
        "description": "Returns a list of all skills for the domain\n",
        "responses": {
          "200": {
            "description": "Skills returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/skills"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/audit-events": {
      "get": {
        "tags": [
          "Audit-events"
        ],
        "summary": "List audit events for the domain of the requesting API user",
        "description": "Returns a list of all audit events for the domain\n",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by action",
              "title": "Action"
            },
            "description": "Filter by action"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start time filter for events, time in ISO8601 format",
              "title": "Start Time"
            },
            "description": "Start time filter for events, time in ISO8601 format"
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End time filter for events, time in ISO8601 format",
              "title": "End Time"
            },
            "description": "End time filter for events, time in ISO8601 format"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by email",
              "title": "Email"
            },
            "description": "Filter by email"
          },
          {
            "name": "result",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by result",
              "title": "Result"
            },
            "description": "Filter by result"
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by owner",
              "title": "Owner"
            },
            "description": "Filter by owner"
          },
          {
            "name": "ip",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by IP address",
              "title": "Ip"
            },
            "description": "Filter by IP address"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "description": "Number of events to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Number of events to return"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination",
              "title": "Cursor"
            },
            "description": "Cursor for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Audit events returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/audit-events"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/search/items": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "List items for a search query",
        "description": "Lists items for a search query\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "query-string",
            "in": "query",
            "description": "The search query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position of a paged request, starting from 0.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items returned. **Default is 10 items**. **Max limit is 100 items**.",
            "schema": {
              "type": "integer",
              "default": 10,
              "max": 100
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "description": "The ordering of the returned items. Sorting options include relevancy (`relevancy`), and date added (`date_added`).",
            "required": false,
            "schema": {
              "type": "string",
              "default": "relevancy",
              "enum": [
                "relevancy",
                "date_added"
              ]
            }
          },
          {
            "name": "with-fields",
            "in": "query",
            "description": "Additional fields to include in the response specified as a comma separated list.\n\nSpecify `*` to return all of the additional fields available\n\nIf not provided, only these core fields will be returned: `id`, `url`, `title`, `description`, `author`, `spots`, `lists`, `content_type`, `date_original_added`\n",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Items returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/items"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "start-or-limit-not-integer": {
                    "$ref": "#/components/examples/not-integer-error"
                  },
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than “limit”, “start”, \"etc\")"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          }
        }
      }
    },
    "/search/instant-answer": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Generates an instant answer for a question",
        "description": "Generates an instant answer for a question\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/hs-user"
          },
          {
            "name": "query-string",
            "in": "query",
            "description": "Query in natural language",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Answer returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "answer": {
                      "type": "string"
                    },
                    "sources": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "answer": "To create a pitch in Highspot, go to...",
                    "sources": [
                      {
                        "title": "US221360 A",
                        "url": "https://app.highspot.com/items/a7743c8154b78b8f30ff1d21"
                      },
                      {
                        "title": "US221360 B",
                        "url": "https://app.highspot.com/items/a7743c8154b78b8f30ff1d22"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "unsupported-property": {
                    "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to field other than “query-string”, \"etc\")"
                  },
                  "not-enough-context": {
                    "value": "We can't find enough relevant information to answer your question. Try rephrasing your question or using more specific keywords."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedImpersonationErrors"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimitExceeded"
          },
          "500": {
            "description": "Error answering question",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "error-answering-question": {
                    "value": "We encountered an error while answering your question"
                  },
                  "unexpected-error-answering-question": {
                    "value": "There was an error in providing an answer to this question"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Temporary error answering question",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/plain-text-error"
                },
                "examples": {
                  "temporary-error-answering-question": {
                    "value": "We can't answer your question at the moment, please try again soon"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "examples": {
      "not-string-error": {
        "value": "Property \u003Ckey\u003E: Value must be a string"
      },
      "not-integer-error": {
        "value": "Property \u003Ckey\u003E: Value must be an integer"
      },
      "maximum-length-256-characters": {
        "value": "Property \u003Ckey\u003E must be less than 256 characters"
      },
      "maximum-length-100-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 100 characters"
      },
      "minimum-length-1-character": {
        "value": "Property \u003Ckey\u003E: Value must be at least 1 character"
      },
      "maximum-length-4096-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 4096 characters"
      },
      "maximum-properties-count": {
        "value": "Count of properties must be less than 1024"
      },
      "value-characters-invalid": {
        "value": "Property \u003Ckey\u003E must start with a letter, underscore or hyphen, and contain only letters, numbers, underscores or hyphens"
      },
      "value-not-object": {
        "value": "Value must be an object"
      },
      "value-not-array": {
        "value": "Value must be an array"
      },
      "email-invalid": {
        "value": {
          "status": "failed",
          "name": "\u003Cemail\u003E",
          "error": "FORMAT",
          "message": "because that is not a valid email address"
        }
      },
      "invalid-email-address": {
        "value": "Invalid email address"
      },
      "user-does-not-exist": {
        "value": {
          "id": "\u003Cuser_id\u003E",
          "type": "User",
          "message": "This user does not exist"
        }
      },
      "user-deleted": {
        "value": {
          "id": "\u003Cuser_id\u003E",
          "type": "User",
          "message": "This user has been deleted by an administrator"
        }
      },
      "invalid-attributes": {
        "value": "Invalid attributes"
      },
      "readonly-error": {
        "value": "Property \u003Ckey\u003E is readonly"
      },
      "not-boolean-error": {
        "value": "Property \u003Ckey\u003E: Value must be a boolean"
      },
      "invalid-key": {
        "value": "Invalid \u003Ckey\u003E"
      },
      "cannot-suspend": {
        "value": "Cannot suspend \u003Ckey\u003E"
      },
      "file-not-provided": {
        "value": "No file provided"
      },
      "invalid-properties": {
        "value": "Invalid properties"
      },
      "invalid-spot-format": {
        "value": "Property “spot”: Value does not appear to be a spot id"
      },
      "invalid-list-format": {
        "value": "Property “list”: Value does not appear to be a list id"
      },
      "spot-does-not-exist": {
        "value": {
          "id": "\u003Cspot_id\u003E",
          "type": "Spot",
          "message": "This spot does not exist"
        }
      },
      "list-dne": {
        "value": "List \u003Clist_id\u003E not found"
      },
      "spot-deleted": {
        "value": {
          "id": "\u003Cspot_id\u003E",
          "type": "Spot",
          "message": "This spot has been deleted by another editor"
        }
      },
      "no-file-provided": {
        "value": "No file provided for multipart/form-data"
      },
      "form-data-not-found": {
        "value": "form data not found"
      },
      "incorrect-file-count": {
        "value": "Incorrect file count {file_count}"
      },
      "property-required": {
        "value": "Property \u003Ckey\u003E is required"
      },
      "unsupported-content-type": {
        "value": "Unsupported content type \u003Ccontent_type\u003E"
      },
      "http-https-error": {
        "value": "http/https required"
      },
      "cannot-identify-content-type": {
        "value": "Unable to identify content type for url: \u003Curl\u003E"
      },
      "invalid-url-params": {
        "value": "Invalid url parameter: \u003Curl\u003E"
      },
      "invalid-item-params": {
        "value": "Invalid add item parameters"
      },
      "invalid-custom-usage-label": {
        "value": "Invalid custom usage ‘custom_usage_label’"
      },
      "cannot-add-item-to-folder": {
        "value": "Cannot add item to a folder"
      },
      "cannot-add-item-to-query": {
        "value": "Cannot add item to a query"
      },
      "invalid-date-created": {
        "value": "Invalid date created"
      },
      "maximum-length-200-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 200 characters"
      },
      "maximum-length-2000-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 2000 characters"
      },
      "maximum-length-64-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 24 characters"
      },
      "maximum-length-36-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 36 characters"
      },
      "unsupported-property-item-metadata": {
        "value": "Unsupported property \u003Ckey\u003E (\u003Ckey\u003E refers to fields other than \"id\", \"title\", \"description\", \"author\",  \"date_created\", \"scheduled\", \"expires\", \"internal\", \"custom_usage_label\", \"content_owners\", \"lists\", and \"cms\")"
      },
      "item-does-not-exist": {
        "value": {
          "id": "\u003Citem_id\u003E",
          "type": "Item",
          "message": "This item does not exist"
        }
      },
      "domain-not-found": {
        "value": "Domain not found"
      },
      "item-deleted": {
        "value": {
          "id": "\u003Citem_id\u003E",
          "type": "Item",
          "message": "This item has been deleted by another editor"
        }
      },
      "cannot-download-item": {
        "value": "Item cannot be downloaded"
      },
      "invalid-image-format": {
        "value": "Invalid image format: \u003Ccontent_kind\u003E"
      },
      "missing-url-params": {
        "value": "Missing url parameter"
      },
      "invalid-embed-code": {
        "value": "Invalid or supported embed code"
      },
      "minimum-length-24-characters": {
        "value": "Property \u003Ckey\u003E: Value must be at least 24 character"
      },
      "maximum-length-24-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 24 characters"
      },
      "invalid-date": {
        "value": "Requires a valid date YYYY-MM-DD"
      },
      "unrecognized-object": {
        "value": "Unrecognized object \u003Cobject\u003E"
      },
      "item-not-valid": {
        "value": "Item \u003Citem_id\u003E not found"
      },
      "role-value-error": {
        "value": "Property \"role\": Value must be one of [\"editor\", \"viewer\", \"manager\", \"owner\"]"
      },
      "right-value-error": {
        "value": "Property \"right\": Value must be one of [\"edit\", \"view\", \"manage\"]"
      },
      "maximum-length-1000-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 1000 characters"
      },
      "visibility-private-public-shared-members-error": {
        "value": "Property ‘visibility’: Value must be one of [\"private\" \"public\" \"shared\" \"shared_and_members\"]"
      },
      "group-does-not-exist": {
        "value": {
          "id": "\u003Cgroup_id\u003E",
          "type": "Group",
          "message": "This group does not exist"
        }
      },
      "group-deleted": {
        "value": {
          "id": "\u003Cgroup_id\u003E",
          "type": "Group",
          "message": "This group has been deleted by another editor"
        }
      },
      "missing-info": {
        "value": "Missing \u003Ckey\u003E"
      },
      "pitch_tracking-value-error": {
        "value": "Property \"pitch_tracking\": Value must be one of [\"all\", \"ask\", \"none\", \"opt-out\"]"
      },
      "visibility-private-public-share-error": {
        "value": "Property ‘visibility’: Value must include one of [\"private\", \"public\", \"share\"]"
      },
      "maximum-length-10000-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 10,000 characters"
      },
      "featured-value-error": {
        "value": "Property \"featured\": Value must be a boolean"
      },
      "list-type-value-error": {
        "value": "Property ‘type’: Value must be one of “list group” or “list"
      },
      "children-value-error": {
        "value": "Property ‘children’: Value must be an array"
      },
      "name-required": {
        "value": "Property ‘name’ is required"
      },
      "list-type-error": {
        "value": "Cannot set list type \"list\" if list has children"
      },
      "cannot-delete-system-list": {
        "value": "Cannot delete a system list"
      },
      "list-does-not-exist": {
        "value": {
          "id": "\u003Clist_id\u003E",
          "type": "List",
          "message": "This list does not exist"
        }
      },
      "list-deleted": {
        "value": {
          "id": "\u003Clist_id\u003E",
          "type": "List",
          "message": "This \u003Clist_label\u003E has been deleted by another editor"
        }
      },
      "value-array-max-elements": {
        "value": "Value must not have more than \u003Cmax\u003E elements."
      },
      "invalid-payload": {
        "value": "Invalid payload"
      },
      "invalid-list-ids": {
        "value": "Invalid list IDs"
      },
      "not-global-list": {
        "value": "Not a global list"
      },
      "not-global-folder": {
        "value": "Not a global folder"
      },
      "cannot-move-into-list": {
        "value": "Cannot move into a list"
      },
      "duplicate-list-name-error": {
        "value": "A list or list group with name \u003Cinput_name\u003E already exists"
      },
      "sortby-value-error": {
        "value": "Property \"sortby\": Value must be one of [\"recent_activity\", \"alphabetical\", \"date_created\"]"
      },
      "duplicate-search-term": {
        "value": "\u003Cterm\u003E is already a promoted search term"
      },
      "item-not-in-domain": {
        "value": "Item is in the wrong domain: \u003Citem_id\u003E"
      },
      "search-term-does-not-exist": {
        "value": "\u003Cterm\u003E is not a promoted search term"
      },
      "not-completed-error": {
        "value": "Request not completed"
      },
      "maximum-length-128-characters": {
        "value": "Property \u003Ckey\u003E: Value can be at most 128 characters"
      },
      "cannot-move-system-list": {
        "value": "Cannot move a system list"
      },
      "privacy-request-does-not-exist": {
        "value": {
          "id": "\u003Creq_id\u003E",
          "type": "Privacy Request",
          "message": "This request does not exist"
        }
      },
      "privacy-request-deleted": {
        "value": {
          "id": "\u003Creq_id\u003E",
          "type": "Privacy Request",
          "message": "This request has been deleted by another editor"
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "responses": {
      "UnauthorizedImpersonationErrors": {
        "description": "Unauthorized",
        "content": {
          "text/plain": {
            "schema": {
              "$ref": "#/components/schemas/plain-text-error"
            },
            "examples": {
              "impersonation-disabled": {
                "value": "User is not enabled to impersonate."
              },
              "impersonation-doesnt-exist": {
                "value": "User to impersonate does not exist."
              },
              "impersonation-not-admin": {
                "value": "Cannot impersonate an admin if user is not an admin"
              },
              "unauthenticated": {
                "value": "Could not authenticate user."
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Not authorized"
      },
      "RateLimitExceeded": {
        "description": "Rate Limit Exceeded",
        "content": {
          "text/plain": {
            "schema": {
              "$ref": "#/components/schemas/plain-text-error"
            },
            "examples": {
              "rate-limit-exceeded": {
                "value": "Too many requests."
              }
            }
          }
        },
        "headers": {
          "Retry-After": {
            "description": "The number of seconds to wait before retrying the request.",
            "schema": {
              "type": "string",
              "format": "int32"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "text/plain": {
            "schema": {
              "$ref": "#/components/schemas/plain-text-error"
            },
            "examples": {
              "unauthenticated": {
                "value": "Could not authenticate user."
              }
            }
          }
        }
      },
      "DomainNotFound": {
        "description": "Domain not found",
        "content": {
          "text/plain": {
            "schema": {
              "$ref": "#/components/schemas/plain-text-error"
            }
          }
        }
      },
      "MissingFile": {
        "description": "Missing File"
      },
      "UnknownEntity": {
        "description": "Unknown entity"
      },
      "UnknownKey": {
        "description": "Unknown key"
      },
      "Conflict": {
        "description": "The specified resource is not in the referenced location.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/json-not-found-error"
            }
          }
        }
      },
      "NotImplementedForItem": {
        "description": "Not Implemented for content item",
        "content": {
          "text/plain": {
            "schema": {
              "$ref": "#/components/schemas/plain-text-error"
            },
            "examples": {
              "cannot-edit-content": {
                "value": "Not implemented for content item"
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/json-not-found-error"
            }
          }
        }
      },
      "Gone": {
        "description": "The specified resource has been deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/json-not-found-error"
            }
          }
        }
      }
    },
    "schemas": {
      "AssessmentRequest": {
        "type": "object",
        "properties": {
          "assessment_of_user_email": {
            "type": "string",
            "description": "Email of the user being assessed"
          },
          "reviewer": {
            "type": "object",
            "properties": {
              "company": {
                "type": "string",
                "description": "Company of the reviewer"
              },
              "name": {
                "type": "string",
                "description": "Name of the reviewer (optional)"
              },
              "role": {
                "type": "string",
                "description": "Role of the reviewer (optional)"
              },
              "crm_id": {
                "type": "string",
                "description": "CRM ID of the reviewer (optional)"
              },
              "third_party_assessment_company": {
                "type": "string",
                "description": "Third-party assessment company (optional)"
              },
              "external_link_to_survey": {
                "type": "string",
                "description": "External link to the survey (optional)"
              }
            }
          },
          "final_comments": {
            "type": "string",
            "description": "Final comments (optional)"
          },
          "skill_ratings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "skill_id": {
                  "type": "string",
                  "description": "ID of the skill"
                },
                "assigned_rating": {
                  "type": "integer",
                  "description": "Assigned rating for the skill"
                },
                "skill_title": {
                  "type": "string",
                  "description": "Title of the skill"
                },
                "skill_description": {
                  "type": "string",
                  "description": "Description of the skill"
                },
                "rating_comments": {
                  "type": "string",
                  "description": "Comments on the rating (optional)"
                },
                "is_skipped": {
                  "type": "boolean",
                  "description": "Whether the skill rating is skipped (optional)"
                },
                "proficiency_levels": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "score": {
                        "type": "integer",
                        "description": "Score of the proficiency level"
                      },
                      "title": {
                        "type": "string",
                        "description": "Title of the proficiency level"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the proficiency level"
                      }
                    }
                  }
                }
              }
            }
          },
          "raw_data": {
            "type": "string",
            "description": "Raw data (optional)"
          }
        }
      },
      "ExternalSurveyResponse": {
        "type": "object",
        "properties": {
          "skills_added_in_assessment": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of skill IDs added to the assessment"
          },
          "skills_not_matching_user": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of skill IDs that do not match the user's skills"
          },
          "message": {
            "type": "string",
            "description": "Message indicating no skills assigned (only present when both arrays are empty)"
          }
        }
      },
      "json-bad-request-error": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object"
          },
          "props": {
            "type": "object"
          }
        }
      },
      "plain-text-error": {
        "type": "string"
      },
      "ids": {
        "type": "array",
        "example": [
          "4e71947516454c2cb8313751",
          "3f62138522f50d2b02263652"
        ],
        "items": {
          "type": "string"
        }
      },
      "spot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_official": {
            "type": "boolean"
          }
        },
        "example": {
          "id": "3f62138522f50d2b02263652",
          "title": "Daguerreotypes",
          "description": "Daguerreotypes across all internal and external events",
          "is_official": false
        }
      },
      "spots": {
        "required": [
          "collection"
        ],
        "type": "object",
        "properties": {
          "counts_total": {
            "type": "integer",
            "example": 1
          },
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spot"
            }
          }
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "display_name": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "readOnly": true
          },
          "groups": {
            "$ref": "#/components/schemas/ids"
          },
          "sso": {
            "type": "object",
            "readOnly": true
          },
          "suspended": {
            "type": "boolean"
          },
          "favorites": {
            "$ref": "#/components/schemas/spots"
          },
          "properties": {
            "type": "object"
          }
        },
        "example": {
          "id": "478b6f157b968371cabebb76",
          "name": "John",
          "surname": "Patterson",
          "display_name": "John H. Patterson",
          "email": "jhp@nmc.com",
          "groups": [
            "4e71947516454c2cb8313751",
            "c608d2d3408b41978a8a1b4f"
          ],
          "suspended": false,
          "favorites": {
            "spots": [
              {
                "id": "296684ec0735ae3385abdd38",
                "title": "Machining Specifications",
                "description": "Complete and Up-to-date Specifications for Components"
              },
              {
                "id": "a26973cf0faee13482fdffe1",
                "title": "Mechanical Engineering News",
                "description": "Articles on new related to Mechanical Engineering"
              }
            ]
          },
          "properties": {
            "region": "PNW"
          }
        }
      },
      "users": {
        "required": [
          "collection"
        ],
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user"
            }
          }
        }
      },
      "user-properties": {
        "type": "object",
        "example": {
          "dob": "12/13/1844",
          "education": "Dartmouth College"
        }
      },
      "post-user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "kind": {
            "type": "string",
            "enum": [
              "employee",
              "partner"
            ]
          },
          "manager": {
            "type": "string",
            "description": "user ID of manager to assign to user"
          },
          "properties": {
            "$ref": "#/components/schemas/user-properties"
          }
        }
      },
      "post-users": {
        "type": "array",
        "example": [
          {
            "email": "robert@nmc.com",
            "kind": "employee",
            "manager": "61551062f522a4fd08a755e8",
            "properties": {
              "region": "NE"
            }
          }
        ],
        "items": {
          "$ref": "#/components/schemas/post-user"
        }
      },
      "post-users-response": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "ok",
                    "failed"
                  ]
                },
                "id": {
                  "type": "string"
                },
                "created": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "example": {
          "id": "4e71947516454c2cb8313751"
        }
      },
      "json-validation-error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "invite-users": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "Employee",
              "Partner"
            ]
          },
          "message": {
            "type": "string"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "role": "Employee",
          "message": "Welcome to Highspot!",
          "names": [
            "jack.patterson@highspot.com",
            "jane.doe@highspot.com",
            "john.greene@highspot.com"
          ]
        }
      },
      "status-ok": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "example": {
          "status": "ok"
        }
      },
      "json-not-found-error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "message"
        ]
      },
      "patch-user": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "suspended": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "manager": {
            "type": "string",
            "description": "user ID of manager to assign to user; set to `null` to unassign manager"
          }
        },
        "example": {
          "name": "Jack",
          "surname": "Patterson",
          "suspended": true,
          "email": "jack.patterson@highspot.com",
          "manager": "a7743c8154b78b8f30ff1d21"
        }
      },
      "property-value": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "post-user-account-events": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "deactivate",
              "reactivate"
            ]
          },
          "message": {
            "type": "string"
          },
          "isNotificationEnabled": {
            "type": "boolean"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "event": "deactivate",
          "message": "Your account is deactivated!",
          "isNotificationEnabled": true,
          "emails": [
            "jack.patterson@highspot.com",
            "jane.doe@highspot.com",
            "john.greene@highspot.com"
          ]
        }
      },
      "cms": {
        "type": "object",
        "properties": {
          "integration": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "content_version": {
            "type": "string"
          },
          "metadata_version": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "properties": {

            }
          },
          "deleted": {
            "type": "boolean"
          }
        }
      },
      "content-owners": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "users": [
            "user1_id",
            "user2_id"
          ],
          "groups": [
            "group1_id",
            "group2_id"
          ]
        }
      },
      "item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "date_created": {
            "type": "string",
            "description": "User specified date creation date (specified from the properties dialog by user)."
          },
          "available_at": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          },
          "internal": {
            "type": "boolean"
          },
          "custom_usage_label": {
            "type": "string"
          },
          "spot": {
            "type": "string",
            "readOnly": true
          },
          "can_download": {
            "type": "boolean"
          },
          "content_name": {
            "type": "string"
          },
          "content_type": {
            "type": "string"
          },
          "mime_type": {
            "type": "string"
          },
          "title_external": {
            "type": "string"
          },
          "description_external": {
            "type": "string"
          },
          "date_added": {
            "type": "string",
            "description": "Date when item was added to the current location."
          },
          "date_original_added": {
            "type": "string",
            "description": "Date item was originally added to Highspot."
          },
          "date_updated": {
            "type": "string",
            "description": "Date when the content or metadata was updated."
          },
          "imported_at": {
            "type": "string",
            "description": "Date when the content was imported."
          },
          "lists": {
            "$ref": "#/components/schemas/ids"
          },
          "cms": {
            "$ref": "#/components/schemas/cms"
          },
          "content_owners": {
            "$ref": "#/components/schemas/content-owners"
          },
          "url": {
            "type": "string",
            "description": "URL of item in Highspot."
          },
          "link_url": {
            "type": "string",
            "description": "For content_type WebLink, this is the web url link. For content_type Spot or User, this is relative path to spot or user in Highspot."
          }
        },
        "example": {
          "id": "a7743c8154b78b8f30ff1d21",
          "title": "US221360 A",
          "description": "Improvement in Cash Register and Indicator",
          "author": "James Ritty",
          "date_created": "1879-11-04T00:00:00Z",
          "expires_at": "2023-03-18",
          "available_at": "2022-04-01",
          "internal": false,
          "spot": "589a70268ca79482dbcfcc88",
          "can_download": true,
          "content_name": "hello_world.jpg",
          "content_type": "Image",
          "mime_type": "image/jpeg",
          "title_external": "US221360",
          "description_external": "This invention relates to an improvement in cash registers and indicators",
          "date_added": "2018-10-16T23:11:19.794Z",
          "date_original_added": "2018-10-15T23:11:19.794Z",
          "date_updated": "2018-10-16T23:11:19.794Z",
          "language": "English",
          "lists": [
            "2f82a155b3c1a90fe3781112",
            "589cb8238ca794441ffc6f2b"
          ],
          "imported_at": "2018-10-16T23:11:19.794Z",
          "content_owners": {
            "users": [
              "5d5b114b247b6d612e464dd7",
              "5fb6b553854c3c544ca3454f"
            ],
            "groups": [
              "5dc6b553854c3c544ca4142k"
            ]
          },
          "url": "https://app.highspot.com/items/a7743c8154b78b8f30ff1d21"
        }
      },
      "items": {
        "type": "object",
        "properties": {
          "counts_total": {
            "type": "integer",
            "example": 1
          },
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/item"
            }
          }
        }
      },
      "item-spec-weblink": {
        "type": "object",
        "required": [
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "web_link"
            ]
          },
          "url": {
            "type": "string"
          }
        },
        "example": {
          "type": "web_link",
          "url": "https://www.highspot.com"
        }
      },
      "common_banner_props": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "page_banner_block_1"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "bg_image": {
            "type": "string",
            "description": "Background image for the Banner block"
          },
          "cta_text": {
            "type": "string",
            "description": "Text of the Call To Action button"
          },
          "cta_link": {
            "type": "string",
            "format": "uri",
            "description": "Link to the target page for the Call To Action button"
          }
        }
      },
      "floating_overlay_banner": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_banner_props"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "overlaybanner"
                ]
              }
            }
          }
        ]
      },
      "split_banner": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_banner_props"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "split"
                ]
              },
              "split_pane_side": {
                "type": "string",
                "enum": [
                  "left",
                  "right"
                ]
              }
            }
          }
        ]
      },
      "banded_overlay_banner": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_banner_props"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "bands"
                ]
              }
            }
          }
        ]
      },
      "banner_block": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/floating_overlay_banner"
          },
          {
            "$ref": "#/components/schemas/split_banner"
          },
          {
            "$ref": "#/components/schemas/banded_overlay_banner"
          }
        ]
      },
      "common_heading_props": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "page_heading_block_1"
            ]
          },
          "text": {
            "type": "string"
          }
        }
      },
      "text_heading": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_heading_props"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            }
          }
        ]
      },
      "text_heading_with_divider": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_heading_props"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "text_divider"
                ]
              }
            }
          }
        ]
      },
      "text_heading_with_background": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_heading_props"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "text_bg"
                ]
              }
            }
          }
        ]
      },
      "heading_block": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/text_heading"
          },
          {
            "$ref": "#/components/schemas/text_heading_with_divider"
          },
          {
            "$ref": "#/components/schemas/text_heading_with_background"
          }
        ]
      },
      "image_block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "page_image_block_1"
            ]
          },
          "caption": {
            "type": "string",
            "description": "Caption of the Image"
          },
          "alt_text": {
            "type": "string",
            "description": "Alt Text of the Image"
          },
          "src": {
            "type": "string",
            "format": "uri",
            "description": "Source of the image"
          },
          "link": {
            "type": "string",
            "format": "uri",
            "description": "Link to the target page for the image",
            "example": {
              "url": "https://www.highspot.com"
            }
          }
        }
      },
      "people_block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "people_block_1"
            ]
          },
          "users": {
            "type": "array",
            "description": "Array of User Ids",
            "items": {
              "type": "string"
            },
            "example": [
              "5d656b7451fab1606e043469",
              "6685c6d196660d00013629fa",
              "66b2867055f6f900a81c00bf"
            ]
          }
        },
        "example": {
          "name": "people_block_1",
          "users": [
            "5d656b7451fab1606e043469",
            "6685c6d196660d00013629fa",
            "66b2867055f6f900a81c00bf"
          ]
        }
      },
      "spacer_block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "page_spacer_block_1"
            ]
          }
        }
      },
      "spots_block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "spots_block_1"
            ]
          },
          "kind": {
            "type": "string",
            "enum": [
              "company_spots",
              "specific_spots"
            ],
            "description": "Type of Spots to be displayed:\n * `company_spots` - Official Company Spots\n * `specific_spots` - Specific spots configured by the `spots` property\n"
          },
          "spots": {
            "type": "array",
            "description": "Array of Spot Ids",
            "items": {
              "type": "string"
            },
            "example": [
              "5d656b7451fab1606e043469",
              "6685c6d196660d00013629fa",
              "66b2867055f6f900a81c00bf"
            ]
          }
        },
        "examples": {
          "specific_spots": {
            "name": "spots_block_1",
            "kind": "specific_spots",
            "spots": [
              "5d656b7451fab1606e043469",
              "6685c6d196660d00013629fa",
              "66b2867055f6f900a81c00bf"
            ]
          },
          "company_spots": {
            "name": "spots_block_1",
            "kind": "company_spots"
          }
        }
      },
      "common_content_properties": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "content_block_1"
            ]
          }
        }
      },
      "specific_content_block": {
        "description": "Specific items to display",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_content_properties"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "items"
                ]
              },
              "items": {
                "description": "List of Item Ids to be included in the block",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Item Id"
                    },
                    "title_override": {
                      "type": "string"
                    },
                    "description_override": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "spot_content_block": {
        "description": "Show all content from a Spot or filter using Lists. Content displays dynamically based on your configuration settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_content_properties"
          },
          {
            "type": "object",
            "required": [
              "spot"
            ],
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "spot"
                ]
              },
              "spot": {
                "type": "string",
                "description": "Spot Id for the items in the block"
              },
              "lists": {
                "description": "List Ids for the Lists in the Spot",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "recommended_content": {
        "description": "Display a unique list of content to each user based on the Spots and people they follow.",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_content_properties"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "recommended"
                ]
              }
            }
          }
        ]
      },
      "official_content": {
        "description": "Show the most recently added and updated content from across all Official Spots.",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_content_properties"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "newsfeed"
                ]
              }
            }
          }
        ]
      },
      "inline_content": {
        "description": "Display an item inline. Supported item kinds are vide, audio, html and site",
        "allOf": [
          {
            "$ref": "#/components/schemas/common_content_properties"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "inline"
                ]
              },
              "item": {
                "description": "Id of the item to be displayed",
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Item Id"
                  },
                  "title_override": {
                    "type": "string"
                  },
                  "description_override": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "content_block": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/specific_content_block"
          },
          {
            "$ref": "#/components/schemas/spot_content_block"
          },
          {
            "$ref": "#/components/schemas/recommended_content"
          },
          {
            "$ref": "#/components/schemas/official_content"
          },
          {
            "$ref": "#/components/schemas/inline_content"
          }
        ]
      },
      "divider_block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "page_divider_block_1"
            ]
          }
        },
        "example": {
          "name": "page_divider_block_1",
          "divider_h_align": "center",
          "divider_color": "#FF0000",
          "divider_weight": "medium",
          "divider_width": "percent50",
          "divider_radius": "round"
        }
      },
      "text_block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "text_block_1"
            ]
          },
          "text": {
            "type": "string"
          }
        }
      },
      "rich_text_block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "rich_text_block_1"
            ]
          },
          "html": {
            "type": "string"
          }
        }
      },
      "common_navigation_props": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "enum": [
              "page_button_group_block_1"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "split",
              "simple",
              "image"
            ]
          },
          "buttons": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "link": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "simple_navigation_block": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_navigation_props"
          }
        ]
      },
      "image_navigation_props": {
        "type": "object",
        "properties": {
          "buttons": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "image_src_url": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "split_navigation_block": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_navigation_props"
          },
          {
            "$ref": "#/components/schemas/image_navigation_props"
          }
        ]
      },
      "image_navigation_block": {
        "allOf": [
          {
            "$ref": "#/components/schemas/common_navigation_props"
          },
          {
            "$ref": "#/components/schemas/image_navigation_props"
          }
        ]
      },
      "navigation_block": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/simple_navigation_block"
          },
          {
            "$ref": "#/components/schemas/split_navigation_block"
          },
          {
            "$ref": "#/components/schemas/image_navigation_block"
          }
        ]
      },
      "smartpage": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "object",
            "properties": {
              "kind": {
                "description": "Describes the kind of SmartPage. Only Page and Play are supported.",
                "type": "string",
                "enum": [
                  "Page",
                  "Play"
                ]
              }
            }
          },
          "sections": {
            "description": "Describes the sections in the Play. Can be an empty array for Page.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "settings": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "description": "Title of the section",
                      "type": "string"
                    },
                    "band_count": {
                      "description": "Number of blocks in the section.",
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "blocks": {
            "type": "array",
            "description": "An array of blocks specifying the Smartpage content",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/banner_block"
                },
                {
                  "$ref": "#/components/schemas/heading_block"
                },
                {
                  "$ref": "#/components/schemas/image_block"
                },
                {
                  "$ref": "#/components/schemas/people_block"
                },
                {
                  "$ref": "#/components/schemas/spacer_block"
                },
                {
                  "$ref": "#/components/schemas/spots_block"
                },
                {
                  "$ref": "#/components/schemas/content_block"
                },
                {
                  "$ref": "#/components/schemas/divider_block"
                },
                {
                  "$ref": "#/components/schemas/text_block"
                },
                {
                  "$ref": "#/components/schemas/rich_text_block"
                },
                {
                  "$ref": "#/components/schemas/navigation_block"
                }
              ]
            }
          }
        }
      },
      "item-spec-smartpage": {
        "type": "object",
        "required": [
          "type",
          "content"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "smartpage"
            ]
          },
          "play": {
            "type": "object",
            "required": [
              "audience",
              "launchDate"
            ],
            "properties": {
              "audience": {
                "type": "array",
                "description": "Group Ids for the intended audience of the Play"
              },
              "launchDate": {
                "type": "string",
                "description": "ISO formatted date string for the launch date of the Play. Cannot be before the Play creation date.",
                "example": "2025-03-15T00:00:00-07:00"
              },
              "endDate": {
                "type": "string",
                "description": "Optional ISO formatted date string for the end date of the Play. Cannot be before the Play launch date.",
                "example": "2025-04-15T00:00:00-07:00"
              }
            }
          },
          "parentTemplateId": {
            "type": "string",
            "description": "Item Id of the Smartpage Template"
          },
          "content": {
            "type": "object",
            "$ref": "#/components/schemas/smartpage"
          }
        }
      },
      "item-spec": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/item-spec-weblink"
          },
          {
            "$ref": "#/components/schemas/item-spec-smartpage"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "web_link": "#/components/schemas/item-spec-weblink",
            "smartpage": "#/components/schemas/item-spec-smartpage"
          }
        }
      },
      "patch-item": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "date_created": {
            "type": "string"
          },
          "internal": {
            "type": "boolean"
          },
          "custom_usage_label": {
            "type": "string"
          },
          "lists": {
            "$ref": "#/components/schemas/ids"
          },
          "cms": {
            "$ref": "#/components/schemas/cms"
          },
          "content_owners": {
            "$ref": "#/components/schemas/content-owners"
          }
        },
        "example": {
          "title": "US221360 A",
          "description": "Improvement in Cash Register and Indicator",
          "author": "James Ritty",
          "date_created": "1879-11-04T00:00:00Z",
          "internal": false,
          "custom_usage_label": "test label",
          "title_external": "US221360",
          "description_external": "This invention relates to an improvement in cash registers and indicators",
          "language": "English",
          "lists": [
            "2f82a155b3c1a90fe3781112",
            "589cb8238ca794441ffc6f2b"
          ],
          "cms": {
            "integration": "nevis",
            "id": "73E59CAA-FFCE-46AC-B32D-98701E4FB3D2",
            "content_version": "2.3",
            "metadata_version": "2017-04-29T08:22:51Z",
            "metadata": {
              "filename": "US221360 A.pdf",
              "author": "James Ritty"
            },
            "deleted": false
          },
          "content_owners": {
            "users": [
              "5d5b114b247b6d612e464dd7",
              "5fb6b553854c3c544ca3454f"
            ],
            "groups": [
              "5dc6b553854c3c544ca4142k"
            ]
          }
        }
      },
      "bookmarks": {
        "type": "array",
        "example": {
          "collection": [
            "4e71947516454c2cb8313751",
            "3f62138522f50d2b02263652"
          ]
        },
        "items": {
          "type": "string"
        }
      },
      "thumbnails": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "collection": [
            "https://upload.wikimedia.org/wikipedia/commons/thumb/2/2b/Cmnational1.jpg/300px-Cmnational1.jpg",
            "https://upload.wikimedia.org/wikipedia/en/thumb/6/6b/NationalCashRegister.jpg/185px-NationalCashRegister.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/8/86/Cash_register%2C_built_1904_in_Ohio.jpg/220px-Cash_register%2C_built_1904_in_Ohio.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Moderncashregisters.jpg/220px-Moderncashregisters.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/2/2b/Cmnational1.jpg/1200px-Cmnational1.jpg"
          ]
        }
      },
      "item-properties": {
        "type": "object",
        "example": {
          "year-awarded": "1879",
          "country": "US"
        }
      },
      "async-batch-spec": {
        "type": "array",
        "example": [
          {
            "async_batch": [
              {
                "batch_execution_id": "5bd0c9608b0ed42083512ab7"
              },
              {
                "batch_execution_id": "5bd0c9608b0ed42083512ab8"
              }
            ]
          }
        ],
        "items": {
          "type": "object",
          "properties": {

          }
        }
      },
      "batch-spec": {
        "type": "array",
        "example": [
          {
            "batch": [
              {
                "archive": {
                  "items": [
                    "5bd0c9608b0ed42083512ab6"
                  ],
                  "message": "Archiving this item."
                }
              },
              {
                "restore": {
                  "items": [
                    "5bd0c9608b0ed42083512ab6"
                  ]
                }
              },
              {
                "delete": {
                  "items": [
                    "5bd0cc728b0ed42083512ad3"
                  ],
                  "message": "Deleting this item."
                }
              },
              {
                "bookmark": {
                  "items": [
                    "5bd0ce7a8b0ed42083512b09"
                  ],
                  "spots": [
                    "5bd0ce7a8b0ed42083512b09"
                  ],
                  "users": [
                    "5bd0ce7a8b0ed42083512b09"
                  ],
                  "target_spot": "5b60c3e48cc7ae4481364b34"
                }
              },
              {
                "move": {
                  "items": [
                    "5bc670148b0ed425d7b7423e"
                  ],
                  "spot": "5bc7ae438b0ed425d7b76890",
                  "with_lists": true,
                  "lists": []
                }
              },
              {
                "setAuthor": {
                  "items": [
                    "5bc670148b0ed425d7b7423e"
                  ],
                  "value": "Some Author"
                }
              },
              {
                "setLanguage": {
                  "items": [
                    "5bc670148b0ed425d7b7423e"
                  ],
                  "value": "English"
                }
              },
              {
                "set_options": {
                  "items": [
                    "5bc670148b0ed425d7b7423e"
                  ],
                  "value": {
                    "expires": "2520-12-16"
                  }
                }
              }
            ]
          }
        ],
        "items": {
          "type": "object",
          "properties": {

          }
        }
      },
      "item-weblink-url": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "example": {
          "id": "4e71947516454c2cb8313751",
          "title": "Machinists III",
          "description": "Level III Machinists"
        }
      },
      "groups": {
        "required": [
          "collection"
        ],
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group"
            }
          }
        }
      },
      "group-post": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "private",
              "public",
              "shared",
              "shared_and_members"
            ]
          }
        },
        "example": {
          "title": "Machinists III",
          "description": "Level III Machinists",
          "visibility": "private"
        }
      },
      "id-response-object": {
        "type": "object",
        "example": {
          "id": "4e71947516454c2cb8313751"
        }
      },
      "patch-group": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "example": {
          "title": "Machinists III",
          "description": "Level III Machinists"
        }
      },
      "group-properties": {
        "type": "object",
        "example": {
          "partner": "yes"
        }
      },
      "post-group-settings-permissions": {
        "type": "object",
        "properties": {
          "batch": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "add": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "object"
                    },
                    "groups": {
                      "type": "object"
                    }
                  }
                },
                "update": {
                  "type": "object"
                },
                "remove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "notify": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "example": {
          "batch": [
            {
              "add": {
                "users": {
                  "user13@highspot.com": "editor",
                  "user12@highspot.com": "viewer",
                  "user11@highspot.com": "co_owner"
                },
                "groups": {
                  "63cf171c311e5603ac6886e8": "editor",
                  "649607be311e56fb3cd94168": "editor"
                }
              }
            },
            {
              "update": {
                "users": {
                  "62b21937311e56c5045b9ee0": "editor",
                  "62b21937311e56c5045b9ee8": "co_owner"
                },
                "groups": {
                  "649607be311e56fb3cd94168": "viewer",
                  "63cf171c311e5603ac6886e8": "co_owner"
                }
              }
            },
            {
              "remove": {
                "users": [
                  "62b21937311e56c5045b9ee0",
                  "62b21937311e56c5045b9ee8"
                ],
                "groups": [
                  "649607be311e56fb3cd94168",
                  "63cf171c311e5603ac6886e8"
                ]
              }
            }
          ],
          "notify": true,
          "message": "Welcome to the group."
        }
      },
      "put-group-settings-visibility": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "string",
            "enum": [
              "private",
              "everyone",
              "shared",
              "shared_and_members"
            ]
          }
        },
        "example": {
          "visibility": "private"
        }
      },
      "put-group-settings-basics": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "promoted": {
            "type": "boolean"
          },
          "hide_pitch_share_emails": {
            "type": "boolean"
          },
          "author_pages": {
            "type": "boolean"
          },
          "author_smartpage_templates": {
            "type": "boolean"
          },
          "pitch_tracking": {
            "type": "string",
            "enum": [
              "all",
              "ask",
              "none",
              "opt-out"
            ]
          },
          "enable_pitch_collect_recipients_email": {
            "type": "boolean"
          },
          "google_drive_managed_access": {
            "type": "boolean"
          },
          "quip_managed_access": {
            "type": "boolean"
          },
          "brainshark_learning": {
            "type": "boolean"
          },
          "brainshark_coaching": {
            "type": "boolean"
          },
          "mindtickle": {
            "type": "boolean"
          },
          "drift": {
            "type": "boolean"
          },
          "lessonly": {
            "type": "boolean"
          },
          "trailhead": {
            "type": "boolean"
          },
          "training": {
            "type": "boolean"
          },
          "training_reports": {
            "type": "boolean"
          },
          "configure_essential_offline_content": {
            "type": "boolean"
          },
          "publish_to_marketplace": {
            "type": "boolean"
          },
          "consume_from_marketplace": {
            "type": "boolean"
          },
          "salesforce_spot_relation": {
            "type": "boolean"
          },
          "restrict_remix": {
            "type": "boolean"
          },
          "restrict_edit_copy": {
            "type": "boolean"
          },
          "meeting_topics": {
            "type": "boolean"
          }
        },
        "example": {
          "title": "Sales Enablement - North America",
          "description": "Users in the Sales Enablement group within North America.",
          "author_pages": false,
          "hide_pitch_share_emails": true,
          "promoted": true,
          "pitch_tracking": "all"
        }
      },
      "spot-post": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "private",
              "public",
              "shared"
            ]
          },
          "is_official": {
            "type": "boolean"
          }
        },
        "example": {
          "title": "Daguerreotypes",
          "description": "Daguerreotypes for all events",
          "visibility": "private",
          "is_official": false
        }
      },
      "patch-spot": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "private",
              "public",
              "shared"
            ]
          },
          "is_official": {
            "type": "boolean"
          }
        },
        "example": {
          "title": "My Renamed Spot",
          "description": "This is a better description.",
          "visibility": "private",
          "is_official": false
        }
      },
      "spot-users": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "users": [
            "john.doe@highspot.com",
            "jane.doe@highspot.com"
          ],
          "groups": [
            "group1_id",
            "group2_id"
          ]
        }
      },
      "lists": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/list"
        }
      },
      "list": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "list_group",
              "list",
              "query"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "children": {
            "$ref": "#/components/schemas/lists"
          },
          "featured": {
            "type": "boolean"
          },
          "is_global": {
            "type": "boolean"
          }
        },
        "example": {
          "id": "2f82a155b3c1a90fe3781112",
          "type": "list_group",
          "name": "Composition",
          "description": "Primary material used",
          "parent": "58a4e2d58ca79454ea942f52",
          "is_global": false,
          "children": [
            {
              "type": "list",
              "id": "589cb8238ca794441ffc6f2b",
              "name": "Steel",
              "parent": "2f82a155b3c1a90fe3781112"
            },
            {
              "type": "list",
              "id": "589a70268ca79482dbcfcc87",
              "name": "Aluminum",
              "parent": "2f82a155b3c1a90fe3781112"
            }
          ]
        }
      },
      "add-list": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "list-group",
              "list"
            ]
          },
          "featured": {
            "type": "boolean"
          },
          "children": {
            "$ref": "#/components/schemas/add-lists"
          }
        },
        "example": {
          "name": "Composition",
          "description": "Primary material used",
          "type": "list_group",
          "featured": true,
          "children": [
            {
              "name": "Steel"
            },
            {
              "name": "Aluminum"
            }
          ]
        }
      },
      "add-lists": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/add-list"
        }
      },
      "add-global-list": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "list-group",
              "list"
            ]
          },
          "children": {
            "$ref": "#/components/schemas/add-lists"
          }
        },
        "example": {
          "name": "Composition",
          "description": "Primary material used",
          "type": "list_group",
          "children": [
            {
              "name": "Steel"
            },
            {
              "name": "Aluminum"
            }
          ]
        }
      },
      "patch-global-list": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent to nest under, set to `null` to make it a top level global list"
          }
        },
        "example": {
          "name": "Updated list name",
          "parent_id": "296684ec0735ae3385abdd38"
        }
      },
      "pitch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "from_id": {
            "type": "string"
          },
          "has_passcode": {
            "type": "boolean"
          },
          "expiration_date": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "sent_at": {
            "type": "string"
          },
          "viewed_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "activity_notifications": {
            "type": "boolean"
          },
          "kind": {
            "type": "string"
          },
          "dwell_time": {
            "type": "float"
          },
          "downloads": {
            "type": "integer"
          },
          "views": {
            "type": "integer"
          }
        },
        "example": {
          "id": "6181b3eeb2eb937e7cc8039e",
          "name": "My Pitch",
          "from_id": "60f9abb1b2eb930c9ea1ee87",
          "owner_id": "60f9ae0db2eb93150454490f",
          "has_passcode": false,
          "expiration_date": "2021-12-15T23:29:46.000Z",
          "thumbnail": "http://api.highspot.com/thumbnails/LvJoaWdoc3BvdaC5b20vYjNlMGY0ZWQ2ZDcxZDBmNWMwMmI4ODUwZDMxYTMwZWY2M5M0NTExMy8yNDV4IiwiNjBmOWFhMGViNmViOTMxMjZhNTU5NDdiIiwibG9jYWxob3N0Il0=--012f18bdb341c0cd5df5d719423048ab2cfad3e0/1.2/1.gif",
          "created_at": "2021-11-02T21:55:58.060Z",
          "sent_at": "2021-11-02T21:56:12.598Z",
          "viewed_at": "2021-11-15T20:23:24.528Z",
          "updated_at": "2021-11-15T20:37:13.431Z",
          "activity_notifications": true,
          "kind": "Email",
          "dwell_time": 13.411,
          "downloads": 0,
          "views": 2
        }
      },
      "pitches": {
        "required": [
          "collection"
        ],
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pitch"
            }
          }
        }
      },
      "custom-usage-label": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "color": {
            "type": "array"
          },
          "pitchPolicy": {
            "type": "object",
            "properties": {
              "expiration": {
                "type": "string"
              },
              "passcode": {
                "type": "string"
              },
              "download": {
                "type": "string"
              },
              "expiration_days": {
                "type": "integer"
              }
            }
          }
        },
        "example": {
          "id": "a7743c8154b78b8f30ff1d21",
          "label": "External",
          "color": [170, 170, 170],
          "pitchPolicy": {
            "expiration": "off",
            "passcode": "off",
            "download": "yes",
            "expiration_days": null
          }
        }
      },
      "promoted-search-result": {
        "type": "object",
        "properties": {
          "term": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "displayInfo": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "icon": {
                      "type": "string"
                    },
                    "kind": {
                      "type": "string"
                    },
                    "cardIcon": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "first_term": [
            {
              "id": "5f4433eab2eb931c2dc5d402",
              "title": "first_item",
              "displayInfo": {
                "name": "Image",
                "icon": "image",
                "kind": "image",
                "cardIcon": "image"
              }
            },
            {
              "id": "5f443e4db2eb9360d8e2c541",
              "title": "second_item",
              "displayInfo": {
                "name": "PDF",
                "icon": "pdf",
                "kind": "pdf",
                "cardIcon": "pdf"
              }
            }
          ],
          "second_term": [
            {
              "id": "5f318024b2eb932ae2969c30",
              "title": "first_item",
              "displayInfo": {
                "name": "Web Link",
                "icon": "globe",
                "kind": "web_link",
                "cardIcon": "link-external"
              }
            }
          ]
        }
      },
      "promoted-search-body": {
        "required": [
          "term"
        ],
        "type": "object",
        "properties": {
          "term": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "my_search_term": [
            "2f82a155b3c1a90fe3781112",
            "589cb8238ca794441ffc6f2b"
          ]
        }
      },
      "custom-homepage-body": {
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "page_id": {
                  "type": "string"
                },
                "group_id": {
                  "type": "string"
                }
              },
              "required": [
                "page_id",
                "group_id"
              ]
            }
          }
        },
        "example": {
          "rules": [
            {
              "page_id": "item-123",
              "group_id": "group-123"
            },
            {
              "page_id": "item-456",
              "group_id": "group-456"
            }
          ]
        }
      },
      "administrative-spots": {
        "type": "object",
        "properties": {
          "company_directory": {
            "type": "string"
          },
          "featured_content": {
            "type": "string"
          },
          "pitch_templates": {
            "type": "string"
          },
          "pitch_styles": {
            "type": "string"
          },
          "smartpage_templates": {
            "type": "string"
          },
          "meeting_topics": {
            "type": "string"
          }
        },
        "example": {
          "company_directory": "spot1",
          "featured_content": "spot2",
          "pitch_templates": "spot3",
          "pitch_styles": "spot4",
          "smartpage_templates": "spot5"
        }
      },
      "administrative-groups": {
        "type": "object",
        "properties": {
          "analysts": {
            "type": "string"
          },
          "publishers": {
            "type": "string"
          },
          "contributors": {
            "type": "string"
          }
        },
        "example": {
          "analysts": "group1",
          "publishers": "group2",
          "contributors": "group3"
        }
      },
      "cloudservices": {
        "type": "object",
        "properties": {
          "crm_providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "calendar_providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email_providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cs_providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sync_providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "chatbot_providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ss_providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ss_custom_urls": {
            "type": "object",
            "properties": {
              "joinme": {
                "type": "string"
              },
              "gotomeeting": {
                "type": "string"
              },
              "webex": {
                "type": "string"
              },
              "bluejeans": {
                "type": "string"
              },
              "zoom": {
                "type": "string"
              },
              "glance": {
                "type": "string"
              }
            }
          }
        },
        "example": {
          "crm_providers": [
            "salesforce"
          ],
          "calendar_providers": [
            "apollo-google-calendar"
          ],
          "email_providers": [
            "gmail"
          ],
          "cs_providers": [
            "dropbox",
            "confluence"
          ],
          "sync_providers": [
            "apollo-google-mail"
          ],
          "chatbot_providers": [
            "drift"
          ],
          "ss_providers": [
            "zoom"
          ],
          "ss_custom_urls": {
            "zoom": "myzoomurl.com"
          }
        }
      },
      "dynamics-configuration": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "api_user_email": {
            "type": "string"
          }
        },
        "example": {
          "enabled": true,
          "api_user_email": "someone@domain.com"
        }
      },
      "salesforce-configuration": {
        "type": "object",
        "properties": {
          "api_user_email": {
            "type": "string"
          }
        },
        "example": {
          "api_user_email": "someone@domain.com"
        }
      },
      "requests": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "collection": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "data_subject_email": {
                  "type": "string",
                  "readOnly": true
                },
                "type": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "destination_spot": {
                  "type": "string"
                },
                "date_submitted": {
                  "type": "string",
                  "description": "Date request was submitted to Privacy Center."
                },
                "date_completed": {
                  "type": "string",
                  "description": "Date request was completed in Privacy Center."
                },
                "request_id": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "count": 70,
          "collection": [
            {
              "data_subject_email": "bim@bar.com",
              "type": "access",
              "status": "In_Progress",
              "destination_spot": "6262f75a311e56197b8539bd",
              "date_submitted": "2022-01-06T22:15:29+00:00",
              "date_completed": "2022-01-06T22:43:26+00:00",
              "request_id": "6a2fb6b2-3eba-4b25-9659-500cb2596d4a"
            },
            {
              "data_subject_email": "jack.patterson@highspot.com",
              "type": "deletion",
              "status": "Complete",
              "destination_spot": null,
              "date_submitted": "2022-01-06T22:15:29+00:00",
              "date_completed": "2022-01-06T22:43:26+00:00",
              "request_id": "d73a1d78-3fbc-4a2d-b6a2-5bfcc33e819e"
            }
          ]
        }
      },
      "post-access-requests": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "destination_spot": {
            "type": "string"
          }
        },
        "example": {
          "emails": [
            "jack.patterson@highspot.com",
            "wilma.doe@highspot.com"
          ],
          "destination_spot": "6262f75a311e56197b8539bd"
        }
      },
      "post-access-requests-response": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "req_submitted": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "example": {
          "request_id": "7056c0de-8669-48be-86d1-35db98e3406c",
          "results": [
            {
              "status": "ok",
              "email": "jack.patterson@highspot.com",
              "req_submitted": true
            },
            {
              "status": "ok",
              "email": "wilma.doe@highspot.com",
              "req_submitted": true
            }
          ]
        }
      },
      "post-deletion-requests": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "emails": [
            "emma.patterson@highspot.com",
            "jane.doe@highspot.com"
          ]
        }
      },
      "post-deletion-requests-response": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "req_submitted": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "example": {
          "request_id": "5361b725-af1a-4dfd-b8d8-698eff01bdca",
          "results": [
            {
              "status": "ok",
              "email": "emma.patterson@highspot.com",
              "req_submitted": true
            },
            {
              "status": "ok",
              "email": "jane.doe@highspot.com",
              "req_submitted": true
            }
          ]
        }
      },
      "privacy_requests_request": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "data_subject_email": {
                  "type": "string",
                  "readOnly": true
                },
                "type": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "destination_spot": {
                  "type": "string"
                },
                "date_submitted": {
                  "type": "string",
                  "description": "Date request was submitted to Privacy Center."
                },
                "date_completed": {
                  "type": "string",
                  "description": "Date request was completed in Privacy Center."
                },
                "request_id": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "collection": [
            {
              "data_subject_email": "bim@bar.com",
              "type": "access",
              "status": "In_Progress",
              "destination_spot": "6262f75a311e56197b8539bd",
              "date_submitted": "2022-01-06T22:15:29+00:00",
              "date_completed": "2022-01-06T22:43:26+00:00",
              "request_id": "6a2fb6b2-3eba-4b25-9659-500cb2596d4a"
            }
          ]
        }
      },
      "skill": {
        "type": "object",
        "properties": {
          "skill_id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Skill title"
          },
          "description": {
            "type": "string",
            "description": "Skill description"
          },
          "ratings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "score": {
                  "type": "number",
                  "description": "Rating value"
                },
                "title": {
                  "type": "string",
                  "description": "Rating title"
                },
                "description": {
                  "type": "string",
                  "description": "Criteria for achieving this rating"
                }
              }
            }
          }
        }
      },
      "skills": {
        "type": "object",
        "properties": {
          "skills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/skill"
            }
          }
        }
      },
      "audit-events": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string"
                },
                "event_time": {
                  "type": "string"
                },
                "owner": {
                  "type": "string"
                },
                "domain": {
                  "type": "string"
                },
                "actor": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "domain": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "session_id": {
                      "type": "string"
                    },
                    "hint": {
                      "type": "string",
                      "nullable": true
                    },
                    "assumed_by": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "action": {
                  "type": "string"
                },
                "target": {
                  "type": "string"
                },
                "outcome": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string"
                    }
                  }
                },
                "details": {
                  "type": "object",
                  "additionalProperties": true
                },
                "datacenter": {
                  "type": "string"
                },
                "source": {
                  "type": "object",
                  "properties": {
                    "ip": {
                      "type": "string"
                    },
                    "src_port": {
                      "type": "string"
                    },
                    "dst_port": {
                      "type": "string"
                    },
                    "device": {
                      "type": "string"
                    }
                  }
                },
                "request_id": {
                  "type": "string"
                },
                "commit": {
                  "type": "string"
                }
              }
            }
          },
          "next_cursor": {
            "type": "string"
          }
        },
        "example": {
          "events": [
            {
              "date": "2025-03-07T14:01:45.410624Z",
              "event_time": "2025-03-07T14:00:56+00:00",
              "owner": "highspot.com",
              "domain": "highspot.com",
              "actor": {
                "type": "anonymous",
                "id": "none",
                "domain": "null",
                "name": "null",
                "session_id": "efab74cbeabd667127367a28fe5e295d8d1d159b0aaadd1a937c97a87f21793a",
                "hint": "null",
                "assumed_by": "null"
              },
              "action": "user.authentication.sso.verified",
              "target": "test@highspot.com",
              "outcome": {
                "result": "SUCCEEDED"
              },
              "details": {
                "user_email": "test@highspot.com",
                "user_id": "65d72bcd8780c9b30568d156",
                "config_name": "HighspotOktaProd"
              },
              "datacenter": "AMERICAS1LATEST",
              "source": {
                "ip": "49.204.16.229",
                "src_port": "57618",
                "dst_port": "80",
                "device": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML"
              },
              "request_id": "012165e9d56b",
              "commit": "4371e5db"
            },
            {
              "date": "2025-03-07T14:01:45.410624Z",
              "event_time": "2025-03-07T14:00:56+00:00",
              "owner": "highspot.com",
              "domain": "highspot.com",
              "actor": {
                "type": "anonymous",
                "id": "none",
                "domain": "null",
                "name": "null",
                "session_id": "efab74cbeabd667127367a28fe5e295d8d1d159b0aaadd1a937c97a87f21793a",
                "hint": "null",
                "assumed_by": "null"
              },
              "action": "user.authentication.sso.verified",
              "target": "test@highspot.com",
              "outcome": {
                "result": "SUCCEEDED"
              },
              "details": {
                "user_email": "test@highspot.com",
                "user_id": "65d72bcd8780c9b30568d156",
                "config_name": "HighspotOktaProd"
              },
              "datacenter": "AMERICAS1LATEST",
              "source": {
                "ip": "49.204.16.229",
                "src_port": "57618",
                "dst_port": "80",
                "device": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML"
              },
              "request_id": "012165e9d56b",
              "commit": "4371e5db"
            }
          ],
          "next_cursor": "2025-03-07T14:00:56+00:00"
        }
      }
    },
    "parameters": {
      "hs-user": {
        "name": "hs-user",
        "in": "header",
        "description": "The email address of the user to impersonate",
        "schema": {
          "type": "string"
        }
      },
      "user": {
        "name": "user",
        "in": "path",
        "description": "The user id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "property": {
        "name": "property",
        "in": "path",
        "description": "The property name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "metadata": {
        "name": "metadata",
        "in": "query",
        "description": "The metadata of the item",
        "schema": {
          "type": "string"
        }
      },
      "item": {
        "name": "item",
        "in": "path",
        "description": "The item id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "group": {
        "name": "group",
        "in": "path",
        "description": "The group id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "member": {
        "name": "member",
        "in": "path",
        "description": "The user id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "spot": {
        "name": "spot",
        "in": "path",
        "description": "The spot id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "list": {
        "name": "list",
        "in": "path",
        "description": "The list id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "privacy-request": {
        "name": "request_id",
        "in": "path",
        "description": "The privacy_request id",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}